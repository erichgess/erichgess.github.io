<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: F# | Elegant Architecture]]></title>
  <link href="http://erichgess.github.io/blog/categories/f-number/atom.xml" rel="self"/>
  <link href="http://erichgess.github.io/"/>
  <updated>2015-10-25T11:47:51-04:00</updated>
  <id>http://erichgess.github.io/</id>
  <author>
    <name><![CDATA[Erich G. Ess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Zippers]]></title>
    <link href="http://erichgess.github.io/blog/2015/08/17/f-number-zippers/"/>
    <updated>2015-08-17T14:16:40-04:00</updated>
    <id>http://erichgess.github.io/blog/2015/08/17/f-number-zippers</id>
    <content type="html"><![CDATA[<p>One of the coolest things about working with F# (and other ML languages) is the
incredibly elegant way that mathematics intersects with programming, to inform
powerful tools for our toolbox.  Algebraic Data Types (ADTs) are the source of a
large amount of this mathematical invention.  Recently, I’ve been exploring the
algebra and calculus of types and what happens when you take the derivative
of a type.</p>

<p>Zippers are a type pattern which provide a functional way to interact with and transform data structures:  linked lists,
binary trees, rose trees, etc.  The Zipper is a type with a set of functions that create a cursor which moved through a
data structure, much like you move through your computers file directory tree, and can be used to modify the data
structure.  They’re also a really cool demonstration of the intersection between programming and higher math, in this
case: derivatives.</p>

<p>In this blog post, I will explain both the mechanics of the Zipper type and the mathematics of the Zipper.  First,
I’ll explain the list Zipper:  how to make one in F# and what can be done with it.  Second, the list zipper will be used
as the basis for teaching how to take the derivative of an Algebraic Data Type (ADT).  Finally, the derivative
operation will be usd to create a Zipper for the binary tree.</p>

<!-- more -->

<h2 id="the-list-zipper">The List Zipper</h2>
<p>To start with, we’ll skip the math completely and focus just on the F# code: the type and the functions that, combined,
form a Zipper.   After that, will be how to use the list zipper to interact with a list.</p>

<h3 id="the-f-list-zipper">The F# List Zipper</h3>
<p>Imagine that you have a slide show deck that you want to represent in F#.  You’ll want to be able to move back and forth
through the deck as you give your presentation.  You also want to be able to change a specific slide as you work on your
presentation.</p>

<p>A list makes a good type to represent our slide show, as a first version.  However, how can we move back and forth
through the deck and how can we swap out slides as we move through the deck?  We want a type which stores an ordered
set of slides, has a focus on the slide which is being projected to a screen, and has functions for moving the focus
to the previous slide, to the next slide, or swapping in a new slide.</p>

<p>The type we just described is the list zipper.  And the above paragraph describes all the things the list Zipper needs
to have:  something which represents the current slide, all the slides before the current slide, all the slides after
the current slide, and functions to navigate the slide show.  If we take all of those requirements we get this type in
F#:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Zipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="nc">Zipper</span> <span class="k">of</span> <span class="o">(</span><span class="err">‘</span><span class="n">a</span> <span class="kt">list</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="kt">list</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="n">create</span> <span class="n">l</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">l</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">oops</span><span class="err">”</span>
</span><span class='line'>        <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Zipper</span> <span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">t</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">z</span><span class="o">.</span><span class="n">right</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">z</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="bp">[]</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="n">h</span><span class="o">::</span><span class="n">rt</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">z</span><span class="o">::</span><span class="n">l</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">rt</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">z</span><span class="o">.</span><span class="n">left</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">z</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Zipper</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Zipper</span><span class="o">(</span><span class="bp">[]</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">h</span><span class="o">::</span><span class="n">lt</span><span class="o">,</span> <span class="n">z</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">lt</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">z</span><span class="o">::</span><span class="n">r</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">z</span><span class="o">.</span><span class="n">update</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(</span><span class="nc">Zipper</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="o">_,</span> <span class="n">r</span><span class="o">))</span> <span class="o">=</span> <span class="n">z</span> <span class="k">in</span> <span class="nc">Zipper</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>This also has a constructor function which takes a list and returns a zipper on that list.</p>

<p>The core of this type is the tuple: <code>'a list * 'a * 'a list</code>.  The first type represents the list of elements which
precede the cursor.  The second type, <code>'a</code>, represents the value in the list which the cursor points to.  The third
type, <code>'a list</code>, represents the list of elements which come after the cursor.</p>

<h4 id="demonstration-of-the-list-zipper">Demonstration of the List Zipper</h4>

<p>Start by creating a zipper from a list
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">z</span> <span class="o">=</span> <span class="nn">Zipper</span><span class="p">.</span><span class="n">create</span> <span class="o">[</span><span class="mi">1</span><span class="o">;</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="c1">// val z : Zipper&lt;int&gt; = Zipper ([], 1, [2; 3; 4])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The cursor points to the first element in the list, there are no elements to the left of the cursor so that list is
empty, and all the other elements are to the right of the cursor so they are in the respective list.</int></p>

<p>Move the cursor to the right
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">z</span><span class="o">.</span><span class="n">right</span><span class="bp">()</span><span class="o">;;</span>
</span><span class='line'><span class="c1">// val it : Zipper&lt;int&gt; = Zipper ([1], 2, [3; 4])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Calling the right function has returned a new zipper with the cursor now pointing to the second element in the list.</int></p>

<p>Take the new zipper and move the cursor right one more time
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">right</span><span class="bp">()</span><span class="o">;;</span>
</span><span class='line'><span class="c1">// val it : Zipper&lt;int&gt; = Zipper ([2; 1], 3, [4])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Note that the left list is storing the elements in reverse order.  This is becaues when the cursor moves left in a
list it is traversing the list in reverse order.</int></p>

<p>Update the value at the cursor:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">update</span> <span class="o">-</span><span class="mi">3</span><span class="o">;;</span>
</span><span class='line'><span class="c1">// val it : Zipper&lt;int&gt; = Zipper ([2; 1], -3, [4])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<p>Move to the left:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">left</span><span class="bp">()</span><span class="o">;;</span>
</span><span class='line'><span class="c1">// val it : Zipper&lt;int&gt; = Zipper ([1], 2, [-3; 4])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<h2 id="the-math-behind-the-list-zipper">The Math Behind the List Zipper</h2>
<p>Here’s an approximate type definition for a list:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="nc">Empty</span> <span class="o">|</span> <span class="nc">List</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This type definition is strictly to make how the algebra &amp; calculus behind the list
zipper gets derived and to explicitly call out that the list type is, mathematically,
a recursive type.</p>

<p>Algebraicly, this List is represented as:</p>

<script type="math/tex; mode=display">L = 1 + a\cdot L</script>

<p>The derivative of which is:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray} 
\partial_aL &=& L + a\partial_aL \\
\partial_aL(1 - a) &=& L \\
\partial_aL &=& \frac{L}{1 - a} \\
\partial_aL &=& \frac{1 + a + a^2 + a^3...}{1-a} = \frac{(1 + 2a + 3a^2 + ...)(1-a)}{1-a} = L^2 \\
\end{eqnarray}
 %]]&gt;</script>

<p>If we take <script type="math/tex">L^2</script> and convert it to a type we get:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="n">partial_l</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="kt">list</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Which is close to our Zipper type but not quite there.</p>

<p>As explained in Colin McBrides paper on the topic of zippers and type derivatives, we can think of the derivative of a
type as a hole which is poked into the type where the hole represents the cursor.  The hole can can take any value of
the type <code>'a</code>.  We can think of the pair of lists representing where in the list the hole is and the <code>'a</code> respresents
the value of the hole.  In other words, take the derivative of <code>List&lt;'a&gt;</code> and multiply it by <code>'a</code> and you have the
zipper:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Zipper</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="kt">list</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="deriving-the-binary-tree-zipper">Deriving the Binary Tree Zipper</h2>
<p>Now that we know how to use differentiation to create the zipper for the List type, let’s use the same technique to
create the zipper for a binary tree.  This will start with defining a simple type for the binary tree, then
evaluating the derivative of the binary tree type, and, finally, converting the result into an F# type.</p>

<p>Here’s the binary tree type we’ll work with:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Branch</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Empty</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can take this type in represent it mathematically as:</p>

<script type="math/tex; mode=display">T(a) = 1 + a \cdot T^2(a)</script>

<p>And taking the derivative we get:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray}
\partial_aT(a) &=& T^2(a) + a \cdot (2 \cdot T(a) \cdot \partial_aT(a)) \\

\partial_aT(a) - 2 \cdot a \cdot T(a) \cdot \partial_aT(a) &=& T^2(a) \\

\partial_aT(a) \cdot (1 - 2 \cdot a \cdot T(a)) &=& T^2(a) \\

\partial_aT(a) &=& \frac{T^2(a)}{1 - 2 \cdot a \cdot T(a)} \\
\end{eqnarray}
 %]]&gt;</script>

<p>If we take this result and factor out the <script type="math/tex">T^2</script> to get two terms, we get the following:</p>

<script type="math/tex; mode=display">T^2(a) \cdot \left( \frac{1}{1 - 2 \cdot a \cdot T(a)} \right)</script>

<p>The second term, <script type="math/tex">\frac{1}{1 - 2 \cdot a \cdot T(a)}</script>, looks remarkably similar to <script type="math/tex">\frac{1}{1-a}</script> which, as
we saw in the section about Lists, becomes <script type="math/tex">L(a)</script>.  So the derivative of the tree becomes:</p>

<script type="math/tex; mode=display">\partial_aT(a) = T^2(a) \cdot L(2 \cdot a \cdot T(a))</script>

<p>Now, we know that the Zipper is equal to the derivative of the type times <script type="math/tex">a</script>, which represents the possible values of
the focus, this means that our Tree Zipper type will looke like this:</p>

<script type="math/tex; mode=display">a \cdot T^2 \cdot L(2 \cdot a \cdot T)</script>

<p>Translating the <script type="math/tex">a \cdot T^2</script> to F# is easy, but what does the type in the list, <script type="math/tex">2 \cdot a \cdot T</script>, represent?
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">XXX</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can take <script type="math/tex">2 \cdot a \cdot T</script> and expand it to <script type="math/tex">a \cdot T + a \cdot T</script>, which tells us that <script type="math/tex">XXX</script> is a union
of a tuple:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">XXX</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">A</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">B</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But what the hell does the list of <script type="math/tex">XXX</script> represent and what purpose does it play in the Zipper?  Remember, the Zipper
has to have a focus, which tells you the value the cursor points to, a way to move through the type, and a way to go
back.  With the List Zipper we can think of <code>right</code> as moving down the list and <code>left</code> as reversing, or undoing, the
move.  So, with the Tree Zipper, the focus is on a node in the tree and the cursor can be moved down the left or right
branch.  When you traverse down several levels in a tree, how do you go back?  There must be some record of the branches
of the tree which were skipped.  When the cursor is at the root of the tree and moves down the left branch, the zipper
must record the value the cursor pointed to and the right branch.  If the cursor moves down a branch again, it must
record the next skipped branch.  This is where the <script type="math/tex">2 \cdot a \cdot T</script> comes from:  <script type="math/tex">a \cdot T</script> is the node value
and the skipped branch the branch can be either the left branch or the right branch which makes to possible values
giving us <script type="math/tex">2 \cdot a \cdot T</script>.  It’s a list of <script type="math/tex">2 \cdot a \cdot T</script> because each move records the branch which was
skipped.</p>

<p>Using this new understanding we can define the type <code>XXX</code> and the TreeZipper as:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">TreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we need the functions to satisfy: creating the Tree Zipper, moving down the right branch, moving down the left
branch, moving back up the tree, and updating the focus.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Branch</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Empty</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">TreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="nc">TreeZipper</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span> <span class="k">with</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">member</span> <span class="n">create</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">oops</span><span class="err">”</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Branch</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="bp">[]</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">member</span> <span class="n">tz</span><span class="o">.</span><span class="n">left</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">tz</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">tz</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Branch</span><span class="o">(</span><span class="n">lx</span><span class="o">,</span> <span class="n">ll</span><span class="o">,</span> <span class="n">lr</span><span class="o">),</span> <span class="n">r</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">lx</span><span class="o">,</span> <span class="n">ll</span><span class="o">,</span> <span class="n">lr</span><span class="o">,</span> <span class="nc">Right</span><span class="o">(</span> <span class="n">x</span><span class="o">,</span> <span class="n">r</span><span class="o">)::</span><span class="n">history</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">tz</span><span class="o">.</span><span class="n">right</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">tz</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">tz</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="nc">Branch</span><span class="o">(</span><span class="n">rx</span><span class="o">,</span> <span class="n">rl</span><span class="o">,</span> <span class="n">rr</span><span class="o">),</span> <span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">rx</span><span class="o">,</span> <span class="n">rl</span><span class="o">,</span> <span class="n">rr</span><span class="o">,</span> <span class="nc">Left</span><span class="o">(</span> <span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">)::</span><span class="n">history</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">tz</span><span class="o">.</span><span class="n">back</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">match</span> <span class="n">tz</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(_,</span> <span class="o">_,</span> <span class="o">_,</span> <span class="bp">[]</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">tz</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="nc">Right</span><span class="o">(</span> <span class="n">hx</span><span class="o">,</span> <span class="n">hr</span><span class="o">)::</span><span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">hx</span><span class="o">,</span> <span class="nc">Branch</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">),</span> <span class="n">hr</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="nc">Left</span><span class="o">(</span> <span class="n">hx</span><span class="o">,</span> <span class="n">hl</span><span class="o">)::</span><span class="n">history</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">hx</span><span class="o">,</span> <span class="n">hl</span><span class="o">,</span> <span class="nc">Branch</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">),</span> <span class="n">history</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">member</span> <span class="n">tz</span><span class="o">.</span><span class="n">update</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(</span><span class="nc">TreeZipper</span><span class="o">(_,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">history</span><span class="o">))</span> <span class="o">=</span> <span class="n">tz</span> <span class="k">in</span> <span class="nc">TreeZipper</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">history</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="tree-zipper-demonstration">Tree Zipper Demonstration</h3>
<p>Here’s a simple tree from which a Tree Zipper will be created.  That TreeZipper will be used to traverse the tree.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Branch</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span>
</span><span class='line'>            <span class="nc">Branch</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span>
</span><span class='line'>                <span class="nc">Branch</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">),</span>
</span><span class='line'>                <span class="nc">Branch</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)),</span>
</span><span class='line'>            <span class="nc">Branch</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span>
</span><span class='line'>                <span class="nc">Branch</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">),</span>
</span><span class='line'>                <span class="nc">Branch</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)));;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//val t : Tree&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  Branch</span>
</span><span class='line'><span class="c1">//    (1,Branch (2,Branch (3,Empty,Empty),Branch (4,Empty,Empty)),</span>
</span><span class='line'><span class="c1">//     Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)))&lt;/int&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">tz</span> <span class="o">=</span> <span class="nn">TreeZipper</span><span class="p">.</span><span class="n">create</span> <span class="n">t</span><span class="o">;;</span>
</span><span class='line'><span class="c1">//val tz : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (1,Branch (2,Branch (3,Empty,Empty),Branch (4,Empty,Empty)),</span>
</span><span class='line'><span class="c1">//    Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)),</span>
</span><span class='line'><span class="c1">//    [])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Note how in the TreeZipper, the history list is empty: `[]`.  When we start moving through the tree, this list will get
populated with the paths which were skipped.  That is what will allow us to backtrack.</int></p>

<p>Now move the zipper down the left branch:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">tz</span><span class="o">.</span><span class="n">left</span> <span class="bp">()</span><span class="o">;;</span>
</span><span class='line'><span class="c1">//val it : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (2,Branch (3,Empty,Empty),Branch (4,Empty,Empty),</span>
</span><span class='line'><span class="c1">//     [Right (1,Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)))])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The zipper started at the root of the tree, `1`, and moved down to the left branch node.  The zipper is now pointing to
the value `2` and has the leaves `3` and `4` for the left and right branch, respectively.  When the zipper is moved down
the left branch, the node it was pointing to and the skipped branch are pushed into the history list.  This is stored as
`Right`, because it's the right branch, the parent node, `1`, and finally the value of the right branch subtree.</int></p>

<p>Now the cursor is moved down the right branch:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">right</span><span class="bp">()</span><span class="o">;;</span>
</span><span class='line'><span class="c1">//val it : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (4,Empty,Empty,</span>
</span><span class='line'><span class="c1">//     [Left (2,Branch (3,Empty,Empty));</span>
</span><span class='line'><span class="c1">//      Right (1,Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)))])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now we move down the right branch of the node `2` which puts the cursor at the left `3`.  The history list as been
prepended with the cursor's previous position the node `2` and the left branch of that node.</int></p>

<p>Update the value of the cursor:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">update</span> <span class="o">-</span><span class="mi">4</span><span class="o">;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//val it : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (-4,Empty,Empty,</span>
</span><span class='line'><span class="c1">//     [Left (2,Branch (3,Empty,Empty));</span>
</span><span class='line'><span class="c1">//      Right (1,Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)))])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<p>With that leaf updated, time to move back to to the root of the tree:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">back</span> <span class="bp">()</span><span class="o">;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//val it : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (2,Branch (3,Empty,Empty),Branch (-4,Empty,Empty),</span>
</span><span class='line'><span class="c1">//     [Right (1,Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)))])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The back operation is pretty straight forward.  Take the head of the history list, in this case `Left (2,Branch (3,Empty,Empty))`,
This is the Left branch, so the cursor is now pointed to `2` the branch from the history is put in the left Branch slot
and the branch that the zipper was pointing to, `Branch (-4,Empty,Empty)`, is put in the right Branch slot.</int></p>

<p>The process is repeated when we move back again to get to the tree’s root.  Only this time, we are pulling the Left branch
from the history list:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">it</span><span class="o">.</span><span class="n">back</span><span class="bp">()</span><span class="o">;;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//val it : TreeZipper&lt;int&gt; =</span>
</span><span class='line'><span class="c1">//  TreeZipper</span>
</span><span class='line'><span class="c1">//    (1,Branch (2,Branch (3,Empty,Empty),Branch (-4,Empty,Empty)),</span>
</span><span class='line'><span class="c1">//     Branch (5,Branch (6,Empty,Empty),Branch (7,Empty,Empty)),[])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<p>Now this update function only allows the updating of the value of a node.  It wouldn’t be much work to add an update
function which allows replacing the cursor with a whole new subtree.</p>

<h4 id="flexibility">Flexibility</h4>
<p>There’s a lot of room for how the algebraic representation of a type is converted to it’s concrete F# equivalent.</p>

<p>For example, the <code>Branch</code> type from the binary that is used in the Zipper history list:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">TreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Could also be written as:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Left</span> <span class="k">of</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Right</span> <span class="k">of</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">type</span> <span class="nc">TreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="o">(</span><span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Branch</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
In algebraic terms, we could think of this being equivalent to <script type="math/tex">a \cdot (2 \cdot T(a))</script>.  The two interpretations of the
algebraic type are equivalent, mathematically, but the second interpretation may be the superior.  It clearly separates
the parent node from the branch: it’s the value <code>'a</code> with it’s left or right branch.  Whereas the previous interpretation
is read as: the right or left branch and it’s parent value is <code>'a</code>.</p>

<h2 id="further-reading">Further Reading</h2>

<p>A few blog posts about ADTs and calculus (in particular, this article
from <a href="https://codewords.recurse.com/issues/three/algebra-and-calculus-of-algebraic-data-types">Joel Burget</a>
and this series from <a href="https://chris-taylor.github.io/blog/2013/02/13/the-algebra-of-algebraic-data-types-part-iii/">Chris Taylor</a>)
helped clarify how the zipper works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers Tutorial Part 4 - Base Types]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/17/type-providers-tutorial-part-4/"/>
    <updated>2014-04-17T01:09:16-04:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/17/type-providers-tutorial-part-4</id>
    <content type="html"><![CDATA[<p>In Part 3 of this Tutorial, I talked a little about erased types and how the types we generate are actually built on top of a <code>obj</code>.  Previously, I just used a plan <code>obj</code> type and cast an integer to and from the <code>obj</code> types.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="mi">0</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Using just the basic <code>obj</code> works well enough for a very simple generated type (like the simple integer from part 3).  However, it becomes a bit of a mess when you want to make anything complicated.</p>

<p>In this part, we will update our Type Provider to use a more advanced type as our base type.
<!-- more -->
The ultimate goal of this tutorial is to build a type provider, which takes a schema for a data source and generates a type which matches that schema.  For example, suppose our data source is a table with 3 columns labeled “Tom”, “Dick”, and “Harry”, all three of integer type.  Then the type provider shall generate a type with 3 fields labeled “Tom”, “Dick”, and “Harry” of type <code>int</code>.  To make coding this managable, we will need an base type which can keep track of the names of our fields and the values each of each of those fields.</p>

<h3 id="spring-cleaning">Spring Cleaning</h3>
<p>Tutorials Parts 1 through 3 were all about building up the basic skills and, most importantly, understanding needed to work with Type Providers.  Learning how to generate a type, how to add methods, properties, constructors, etc.  Through practice and application, hopefully, you get comfortable with erased types and how generated types are built on top of an base type.</p>

<p>Looking back at the <code>Hello</code> generated type we built in this tutorial; we’ve got something which is a bit slapdash.  That’s fine for tinkering and learning the basics, but now that we have that under our belt it’s time to build an actual (though still only practice) type provider.</p>

<p>All this adds up to: starting our code over.  Below is the fresh foundation from which we will build our Type Provider.  Note, that this does NOT include any constructor.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">TutorialTypeProvider</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="n">typeprovider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">TutorialTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">typeprovider</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'><span class="c1">// provided types below.</span>
</span><span class='line'><span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="s2">&quot;Tutorial&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s2">&quot;TutorialType&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="nc">TutorialType</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And add them to the namespace</span>
</span><span class='line'><span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="n">typeproviderassembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></assembly:typeproviderassembly></p>

<h3 id="data-source-and-schema">Data Source and Schema</h3>

<p>The first thing we need is a data source and schema off of which we work.  Let’s start with a simple data source: just a table with some number of columns.  To keep things simple, we will start with all the columns be integer values.  Our schema, then, would just be a list of the names of the columns.</p>

<p>For example, if we had a table with columns “Tom”, “Dick”, and “Harry”; then our schema would be <code>["Tom"; "Dick"; "Harry"]</code>. That would get passed to our type provider and a type with 3 integer fields named “Tom”, “Dick”, and “Harry” would be generated.</p>

<p>Our schema, then, will be a very simple list of column names.</p>

<h3 id="base-type">Base Type</h3>
<p>Now that we know how to define what the data source looks like, it’s time to make a type which can represent datum which matches our schema.  In our case, this would need to be able to store an integer for each column.  We also know how the generated type will look: a field named for each column defined in our schema.  This means that our base type will be randomly accessed.  So, we should use an array to store the value of each column.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TutorialType</span> <span class="o">=</span> <span class="kt">int</span> <span class="kt">array</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I am using a type alias here, because in the future we will probably build this up in to a more complex type than just an integer array.</p>

<p>We must now configure our Type Provider to use our new base type rather than <code>obj</code>.  So we update the <code>ProvidedTypeDefinition</code> (in the function ‘CreateType’) and make the <code>baseType</code> be of type <code>TutorialType</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                <span class="err">“</span><span class="nc">Hello</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">tutorialtype</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></tutorialtype></p>

<h3 id="schema-to-type">Schema To Type</h3>
<p>Above in “Data Source and Schema”, the schema was defined as just a list of column names.  This schema will need to be passsed to <code>CreateType</code> so that it will have the data needed to generate our type.  So, update <code>CreateType</code> to take a list of strings:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And also update the call to <code>CreateType</code> to pass in some simple test data:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">([</span><span class="err">“</span><span class="nc">Tom</span><span class="err">”</span><span class="o">;</span> <span class="err">“</span><span class="nc">Dick</span><span class="err">”</span><span class="o">;</span> <span class="err">“</span><span class="nc">Harry</span><span class="err">”</span><span class="o">])</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now that <code>CreateType</code> has the schema for our data source, it’s time to build up our type provider.</p>

<h4 id="constructor-i-barely-know-her">Constructor I barely know her</h4>
<p>The first thing to add is the missing constructor.  This will be simple, based upon the number of column names passed to <code>CreateType</code> we want to create an array of integers, all initialized to 1.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="nn">Array</span><span class="p">.</span><span class="n">init</span> <span class="n">columns</span><span class="o">.</span><span class="nc">Length</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>    <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of TutorialType to 0.&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h4 id="properties---insert-uncle-pennybags-joke">Properties - Insert Uncle Pennybags Joke</h4>
<p>The constructor will initialize the base data upon which our type is built.  Now we can add a field for each column, which will get and set the value of that field.  To do this, we will iterate the list of columns and create a property with the corresponding name.  The Getter and Setter functions will be defined as lambdas which store an index to the appropriate location in the array.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="n">columns</span> <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">List</span><span class="p">.</span><span class="n">mapi</span> <span class="o">(</span> <span class="k">fun</span> <span class="n">i</span> <span class="n">col</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">col</span><span class="o">,</span>
</span><span class='line'>                                                <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                                                <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:</span> <span class="nc">TutorialType</span><span class="o">).[</span><span class="n">i</span><span class="o">]</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;),</span>
</span><span class='line'>                                                <span class="nc">SetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:</span> <span class="nc">TutorialType</span><span class="o">).[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">1</span><span class="o">]</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;)))</span>
</span><span class='line'>                <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<p>Note in both <code>GetterCode</code> and <code>SetterCode</code> the lambda functions have <code>%%args.[0] : TutorialType)</code> instead of <code>%%args.[0] : obj</code>.  This is because we defined our <code>baseType</code> to be <code>TutorialType</code>.</p>

<h3 id="validation---a-short-tangent">Validation - A Short Tangent</h3>
<p>Something which is obviously missing is logic to make sure that a valid schema is passed in.  For example, what if a column name is “2”, our code would try to create a property named “2” which is illegal.  Other cases would be: an empty list of columns, an empty or null string for a column name, illegal characters, and duplicate names.</p>

<p>Now, if you’re like me, the next question you have is: what the fuck happens when a Type Provider throws an exception?  To find out, let’s add some simple validation to our TypeProvider and run a test where we fail the validation.</p>

<p>We’ll add some code to check if the list of columns is empty.  In the below codeblock, I added a new function <code>ValidateColumnSchema</code> and called that function at the beginning of <code>CreateType</code>.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">ValidateColumnSchema</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">columns</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">failwith</span> <span class="err">“</span><span class="nc">The</span> <span class="n">column</span> <span class="kt">list</span> <span class="n">is</span> <span class="n">empty</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="nc">CreateType</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">ValidateColumnSchema</span> <span class="n">columns</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Now, just for this test, update the call to create type to look like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Build and send the project output to the FSI.  You should get an output that looks like:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stdin(2,1): error FS3053: The type provider ‘Samples.FSharp.TutorialTypeProvider.TutorialTypeProvider’ reported an error: The type provider constructor has thrown an exception: The column list is empty</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Make sure to change the call to <code>CreateType</code> back to:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">([</span><span class="err">“</span><span class="nc">Tom</span><span class="err">”</span><span class="o">;</span> <span class="err">“</span><span class="nc">Dick</span><span class="err">”</span><span class="o">;</span> <span class="err">“</span><span class="nc">Harry</span><span class="err">”</span><span class="o">])</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="summary">Summary</h3>
<p>In this tutorial, we examined the base type which our Type Provider uses as the base for generated types.  We updated the function which generates our type, so that it will take a list of field names and generate a type which has the corresponding fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 3 - Instantiables]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/05/type-providers-tutorial-part-3-instantiables/"/>
    <updated>2014-04-05T16:42:52-04:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/05/type-providers-tutorial-part-3-instantiables</id>
    <content type="html"><![CDATA[<p>In the last tutorial, we built a simple type named <code>Hello</code> which had some static members.  In this tutorial, we’ll expand our <code>Hello</code> type to include a constructor, an instance property, and an instance method.  Adding these will allow us to create instances of <code>Hello</code> using the <code>new</code> operator:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hello</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We’ll also make <code>Hello</code> store some data, that means our type providers will be one step closer to awesome.  Also, one step closer to being an effective means of interacting with structured data sources.</p>

<p>The full code for what we make in this part will be at the end of this post.
<!-- more -->
### Quick Overview
Here’s the order of what we’ll be doing in Part 3 of this tutorial series</p>

<ol>
  <li>Add a constructor to <code>Hello</code> and make <code>Hello</code> store a single integer value.</li>
  <li>Add a parameterized construtor to <code>Hello</code>.  This will let us set the value for <code>Hello</code>.</li>
  <li>Add an instance property which returns the integer set by the constructor.</li>
  <li>Add an instance method which doubles the integer set by the constructor.</li>
</ol>

<p>Along the way, we’ll see the backing <code>obj</code> type for the first time.  This is where the idea of “Erased Types” I mentioned in Part 1 becomes important.  Remember, as far as the runtime is concerned, our generated types are just instances of <code>obj</code> (all the methods, properties, and names we generate with our Type Providers are illusions to help developers write better code).</p>

<h3 id="constructors---tonka-tough">Constructors - Tonka Tough</h3>
<p>In order to make our type instantiable, we have to have a constructor.  It could be a default constructor or one with parameters, it doesn’t matter, but at least one must exist.</p>

<p>The ProvidedTypes module includes a nice type specifically for handling constructors:  <code>ProvidedConstructor</code>.  Not a very surprising name, if you’ve been paying attention :).</p>

<p>We’re going to add a default constructor to <code>Hello</code> (meaning it takes no parameters) which sets the value of our <code>Hello</code> instance to 0.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    	<span class="c1">/// ….</span>
</span><span class='line'>    	<span class="c1">/// Code from the previous tutorials, removed to save space</span>
</span><span class='line'>    	<span class="c1">/// ….</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="mi">0</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>    <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of Hello to 0.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctor</span>
</span><span class='line'>    <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h5 id="breakdown">Breakdown</h5>
<p>There really is not much to talk about here, it’s very simple.  Except, I want to call out the <code>InvokeCode</code>, because this is the first time we interact with the backing <code>obj</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="mi">0</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As I mentioned before, our <code>Hello</code> type basically sits on top of an instance of a formless <code>obj</code> type.  <code>InvokeCode</code> defines a function which gets executed when the construtor for <code>Hello</code> is called.  The value returned by our function is assigned to our underlying <code>obj</code>.  In our case, our <code>InvokeCode</code> function just returns <code>0</code>, because this will get assigned to a <code>obj' type we cast it to </code>obj<code> using </code>0 :&gt; obj`.</p>

<h3 id="constructors-with-parameters---construx">Constructors with Parameters - Construx</h3>
<p>Now, being able to instantiate <code>Hello</code> is nice, but pretty pointless if we can’t give it any values other than 0.  So here’s how we create a constructor which takes a parameter.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">ctorParams</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="err">“</span><span class="n">v</span><span class="err">”</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(</span> <span class="o">%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))&lt;/</span><span class="kt">int</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>    <span class="n">ctorParams</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This another constructor.  It sets the value of Hello to the parametr.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctorParams</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h5 id="breakdown-1">Breakdown</h5>
<ol>
  <li><code>ProvidedParameter("v", typeof&lt;int&gt;)]</code> - This is how we define a parameter for a function or constructor.  The <code>"v"</code> is the name of the parameter.  Followed by the type of our parameter.</li>
  <li><code>&lt;@@ ( %%(args.[0]) : int) :&gt; obj @@&gt;</code> - This extracts the value of our first parameter (which is <code>v</code> for those keeping score), casts it to an integer, and then boxes it to <code>obj</code>.  The <code>%%</code> is a Code Quotation operator used for “splicing”; this is used to “splice” the <code>args</code> value into a Code Quotation.</li>
</ol>

<h5 id="testing">Testing</h5>
<p>Try loading our new type provider into F# interactive and executing <code>let x = new Tutorial.Hello(1)</code>!</p>

<h3 id="instance-property---910-of-the-law">Instance Property - 9/10 of the Law</h3>
<p>Now we can instantiate our <code>Hello</code> type.  We have some data behind our type.  Let’s add a way to get that data!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">instProperty</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="err">“</span><span class="nc">Value</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>                                            <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                                            <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">int</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instProperty</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<h5 id="breakdown-2">Breakdown</h5>
<p>The instance <code>ProvidedProperty</code> is very similar to the one we used for making a static property:  we specify the name of the property and its type.  However, the <code>GetterCode</code> is important for us to review:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">int</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
What’s important here is the <code>(%%(args.[0]) : obj)</code>.  More specifically, I want to call out the <code>args.[0]</code>:  when dealing with instance methods or properties <code>arg.[0]</code> is where the value of our instance is stored.  In the case of <code>Hello</code>, our instance is just an integer, so we case <code>arg.[0]</code> to an integer and return that value.</p>

<h5 id="testing-1">Testing</h5>
<p>Try running this in the F# Interactive console:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Tutorial</span><span class="o">;;</span>
</span><span class='line'><span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">Tutorial</span><span class="p">.</span><span class="nc">Hello</span><span class="o">(</span><span class="mi">3</span><span class="o">);;</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="nc">Value</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="instance-methods---elementary">Instance Methods - Elementary</h3>
<p>Finally, to wrap up this part of the tutorial.  We will add an instance method which, when invoked, will return twice the <code>Value</code> of our instance of <code>Hello</code>.</p>

<p>The code for this is eerily similar to most of the other code we’ve written for properties, methods, and constructors:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">instanceMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="err">“</span><span class="nc">DoubleValue</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                              <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">((%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">int</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instanceMeth</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></int></p>

<h5 id="testing-2">Testing</h5>
<p>Try running:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Tutorial</span><span class="o">;;</span>
</span><span class='line'><span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">Tutorial</span><span class="p">.</span><span class="nc">Hello</span><span class="o">(</span><span class="mi">3</span><span class="o">);;</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="nc">DoubleValue</span><span class="bp">()</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="conclusion">Conclusion</h3>
<p>This is probably the most important part of the tutorial so far.  We have actually created a Type Provider which generates a type named <code>Hello</code> that can store some data (granted only a single integer :)).  We also made this an instantiable type.  The most important thing is that we got to see the underlying <code>obj</code> upon which our generated type is built.</p>

<p>This underlying type is critical and we will explore it further in a later section of this tutorial.</p>

<p>If anything is learned from Part 3, it’s that our generated type is really just some frosting put on top of an existing type (in <code>Hello</code>’s case an integer).  This may seem silly right now, but keep in mind, the real purpose of a type provider is to allow us to point to a source of data and get a bunch of types which will let us work with that data source in a very F# like manner.</p>

<h2 id="full-code">Full Code</h2>
<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">HelloWorldTypeProvider</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="n">typeprovider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">HelloWorldTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">typeprovider</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'><span class="c1">// provided types below.</span>
</span><span class='line'><span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="s2">&quot;Tutorial&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">obj</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">staticProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">propertyName</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">propertyType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span>
</span><span class='line'>                                        <span class="nc">IsStatic</span><span class="o">=</span><span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add documentation to the provided static property.</span>
</span><span class='line'>    <span class="n">staticProp</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This is a static property&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the static property to the type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticProp</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add a static method</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">staticMeth</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;StaticMethod&quot;</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span>
</span><span class='line'>                       <span class="nc">IsStaticMethod</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                       <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                          <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticMeth</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                   <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="mi">0</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>    <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of Hello to 0.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctor</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">ctorParams</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;v&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)],</span>
</span><span class='line'>                                   <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(</span> <span class="o">%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">obj</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>    <span class="n">ctorParams</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This another constructor.  It sets the value of Hello to the parametr.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctorParams</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">instProperty</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Value&quot;</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">int</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instProperty</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">instanceMeth</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;DoubleValue&quot;</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span>
</span><span class='line'>                       <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                          <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="o">((%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">int</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instanceMeth</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And add them to the namespace</span>
</span><span class='line'><span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="n">typeproviderassembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></assembly:typeproviderassembly></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 2]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/04/type-providers-tutorial-part-2/"/>
    <updated>2014-04-04T20:51:36-04:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/04/type-providers-tutorial-part-2</id>
    <content type="html"><![CDATA[<p>In Part 1 of this series, I briefly explained what a Type Provider was and some of the main concepts which you would need to know.  In Part 2, I am going to build a very simple Type Provider.  The purpose of Part 2 is to cover the basics of developing Type Providers, how to test them with F# Interactive, and the support tools which make developing Type Providers easy.</p>

<p>I will make a Type Provider which generates a single type named “Hello”.  At first it will just have a static property which returns the string <code>"World"</code>.  Then I will add a static method which takes no parameters.  Finally, I will add a static method which takes a parameter.
<!-- more -->
I start by creating a new F# Library Project and name it “TypeProviderTutorial”:</p>

<p><img src="/images/posts/typeprov_tut_p2/1-newproj.png"></p>

<p>I then download the <a href="http://fsharp3sample.codeplex.com/SourceControl/latest#SampleProviders/Shared/ProvidedTypes-0.4.fs">ProvidedTypes-0.4.fs file from the F# 3.0 Sample Pack</a> and add that to my project:</p>

<p><img src="/images/posts/typeprov_tut_p2/2-providedtypes.png" width="300"></p>

<p>Now it’s time to create our Type Provider.  Add a new F# source code file beneath the “ProvidedTypes-0.4.fs” and name it “HelloWorld.fs”.</p>

<p><img src="/images/posts/typeprov_tut_p2/3-addbelow.png">
<img src="/images/posts/typeprov_tut_p2/4-newsource.png"></p>

<h3 id="skeleton-code">Skeleton Code</h3>
<p>We’ll build up from the very bare minimum needed for a Type Provider.  Starting with the boilerplate code which actually tells the compiler our type is a Type Provider:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">HelloWorldTypeProvider</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="n">typeprovider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">HelloWorldTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span> <span class="o">&lt;/</span><span class="n">typeprovider</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'><span class="c1">// provided types below.</span>
</span><span class='line'><span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="n">typeproviderassembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></assembly:typeproviderassembly></p>

<p>This code will compile, but won’t do anything fun yet :).</p>

<h5 id="breakdown">Breakdown</h5>
<ol>
  <li><code>[&lt;TypeProvider&gt;]</code> this attribute tells the compiler that my type <code>HelloWorldTypeProvider</code> is a Type Provider.</li>
  <li>Within <code>HelloWorldTypeProvider</code> we will put the code which actually generates new types.</li>
  <li><code>[&lt;assembly:TypeProviderAssembly]&gt;</code> this attribute indicates that this assembly contains a Type Provider.</li>
</ol>

<h3 id="the-hello-type">The <code>Hello</code> Type</h3>
<p>With the skeleton in place, it’s time to start adding a little muscle.  The following code will create a type named <code>Hello</code>.  This type won’t do anything because there are no members (static or instance).  The code tells the type what assembly it belongs to, what namespace it is in, and the name of the type.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="err">“</span><span class="nc">Tutorial</span><span class="err">”</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">obj</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span>
</span><span class='line'>    <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// And add them to the namespace</span>
</span><span class='line'><span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h5 id="breakdown-1">Breakdown</h5>
<ol>
  <li>I added the method <code>CreateType</code> which will return a new provided type when called.  Right now, all this method does is create the most boring type ever.</li>
  <li><code>types</code> is a list of types which the Type Provider generates</li>
  <li><code>do this.AddNamespace(namespaceName, types)</code> adds the generated types to the namespace <code>namespaceName</code> so that they can be used by a developer.</li>
</ol>

<h5 id="testing">Testing</h5>
<p>Build the library.  When the build is complete, right click on the project in the Solution Explorer and choose “Send Project Output To F# Interactive”:</p>

<p><img src="/images/posts/typeprov_tut_p2/5-firstbuild.png"></p>

<p>In F# Interactive run:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; open Tutorial;;
</span><span class='line'>&gt; Tutorial.Hello;;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When you run <code>Tutorial.Hello</code> you’ll get an error about not having a constructor.  This is a good thing.  The compiler can find the type, but there’s no constructor so it bombs out.</p>

<p>** Before Proceeding make sure to reset F# Interactive **
<img src="/images/posts/typeprov_tut_p2/6-resetfsi.png">
Do this by right clicking on the FSI window and choosing the reset option.</p>

<h3 id="adding-a-static-property">Adding a Static Property</h3>
<p>Time to make that <code>Hello</code> type actually do something.  We’ll add a static property to this type called <code>StaticProperty</code> which will return the string “World!”.  Once we’ve added that, we’ll be able to write <code>Tutorial.Hello.World</code> in our code and it will compile!</p>

<p>To add the static property, I’m going to update the <code>CreateType()</code> method.  It will create a static property by using the <code>ProvidedProperty</code> type, then that value will be added as a member to the generated type.</p>

<p>Here’s the code
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                    <span class="err">“</span><span class="nc">Hello</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)&lt;/</span><span class="n">obj</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// create a new static property</span>
</span><span class='line'><span class="k">let</span> <span class="n">staticProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">propertyName</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>     <span class="c1">// specify the name of the property</span>
</span><span class='line'>                                    <span class="n">propertyType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">string</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span>     <span class="c1">// make it a string type</span>
</span><span class='line'>                                    <span class="nc">IsStatic</span><span class="o">=</span><span class="bp">true</span><span class="o">,</span>                     <span class="c1">// make it a static property</span>
</span><span class='line'>                                    <span class="nc">GetterCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>  <span class="c1">// code quotation.  When someone gets this property </span>
</span><span class='line'>                                                                                 <span class="c1">// this function will be executed and &quot;World!&quot; will be returned</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add documentation to the provided static property.</span>
</span><span class='line'><span class="n">staticProp</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="s2">&quot;This is a static property&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add the static property to the type.</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticProp</span>
</span><span class='line'><span class="n">t</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h5 id="breakdown-2">Breakdown</h5>
<ol>
  <li>The function <code>ProvidedProperty</code> is the most important piece in this step.  It creates a Property member which can then be added to our generated type.</li>
  <li><code>t.AddMember staticProp</code> we add the Static Property we created to our type <code>Hello</code>.</li>
  <li><code>staticProp.AddXmlDocDelayed</code> just adds Intellisense documentation for this property.  You’ll see this text if you over your mouse over <code>Tutorial.Hello.StaticProperty</code>.</li>
</ol>

<h5 id="testing-1">Testing</h5>
<p>Build and send our Library to F# Interactive then open the “Tutorial” namespace.  Try executing <code>Tutorial.Hello.StaticProperty</code> and see what you get.  It should be <code>val it : string = "World!"</code>.  Which is awesome!  We now have a generated type which actually does something!</p>

<h3 id="adding-a-static-method">Adding a Static Method</h3>
<p>Finally, we’ll add a static method to our <code>Hello</code> type.  To keep things consistent, this method will also return “World!”.</p>

<p>Again, the work will be done by updating <code>CreateType()</code>.  In this case, we’ll add a ProvidedMethod to our <code>Hello</code> type.  In the code sample below, I left out the StaticProperty to keep the code snippet small:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">staticMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="err">“</span><span class="nc">StaticMethod</span><span class="err">”</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">IsStaticMethod</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                              <span class="o">&amp;</span><span class="n">lt</span><span class="o">;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&amp;</span><span class="n">gt</span><span class="o">;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticMeth</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></string></p>

<h5 id="breakdown-3">Breakdown</h5>

<p>There isn’t much which is different between adding a static method and a static property.  We use a different type: <code>ProvidedMethod</code>.  Also note that to make this static we set the <code>IsStaticMethod</code> property to <code>true</code> rather than the <code>IsStatic</code> property.  <code>InvokeCode</code> is the function which will be executed when this method is called.  In our case, it will just return “World!”.</p>

<h5 id="testing-2">Testing</h5>

<p>Try executing <code>Tutorial.Hello.StaticMethod();;</code> and see what you get :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 1 - Concepts]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/03/type-providers-tutorial-part-1/"/>
    <updated>2014-04-03T23:36:12-04:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/03/type-providers-tutorial-part-1</id>
    <content type="html"><![CDATA[<p>I’ve only been working with the F# language for the last year.  Which means that all of my learning has been with version 3.x of the F# language.  One of the biggest features of 3.x, and something which I have yet to work with, is the Type Provider.  Type Providers dynamically generate new types, usually from some data source (e.g. databases, XML documents, web services), which a developer can use in their code.  For C# developers this is analogous to the Entity Framework or the “Add Service Reference” in VS, both of which take a database or WSDL, respectively, and generate classes and functions that can be used in code.  For Java this would be similar to Hibernate or wsdl2java.  Just to be clear, when you create a Type Provider, what you’ve built is an Entity Framework or a wsdl2java.  What F# provides is a framework for building your own Type Providers as easily as possible.
<!-- more -->
In order to learn how to build Type Providers, I decided to try my hand at writing a tutorial.  This will, I think, be the first tutorial I’ve ever written.  I’m going to break this tutorial into several phases.  The first phase will be building a very simple “Hello World” type provider, which just creates a type which can be referenced in code (it won’t do anything).  The next phase will be to add static and instance methods, fields, and properties, but, again, the type will be predefined.  Finally, I want to do a true type provider for a data source (I’m thinking Cassandra) which will take the schema for a database and generate a set of types from that schema.</p>

<h3 id="important-things">Important Things</h3>

<h4 id="providedtypesfs">ProvidedTypes.fs</h4>
<p>This is an F# source code file provided by the F# team.  It includes a bunch of things for simplifying the construction of Type Providers.  I’ll be making heavy use of this in my tutorial.  If you plan on writing your own Type Provider, you definitely want to get this:  it can be found in the F# 3.0 sample pack (http://fsharp3sample.codeplex.com/).</p>

<h4 id="erased-types">Erased Types</h4>
<p>Most of the time, when building Type Providers, you’ll be creating erased types:  although this type may have members and functions when compiled it will be convered into an Object type by the compiler.  With the type provider, you are creating a set of methods, fields, properties, and constructors which enable a developer to work with your type, but, when compiled, all of that is “erased” and it just becomes and Object.  There’s a section in the Type Provider MSDN article which explains erased types (http://msdn.microsoft.com/en-us/library/hh361034.aspx#BK_Erased).</p>

<p>What’s important is that this means there will be a lot of casting to and from the <code>obj</code> type in Type Provider code.  This also means that if the Type Provider is going to work with any kind of meaningful data sources, an underlying type (on which the generated types are built) must be defined.  If you look at the MSDN Type Provider Tutorial (http://msdn.microsoft.com/en-us/library/hh361034.aspx), the underlying type is <code>string</code>.</p>

<h4 id="developing-type-providers">Developing Type Providers</h4>
<p>A Type Provider cannot be defined in anything except a Library project.  This seems like a pain but it does make sense:  if you are going to use a Type Provider in your code it must be fully compiled before you use it.</p>

<h4 id="debugging-type-providers">Debugging Type Providers</h4>
<p>This is probably the biggest pain point of developing Type Providers, in my humble opinion.  Do not create a console project in your Type Provider solution and try to use that console project to test your Type Providers.  The problem is that when you build the console project, VS will lock the DLLs from the Type Provider library project.  Once the DLLs are locked you won’t be able to build the Type Provider library until you restart VS.</p>

<p>Use the F# Interactive Console.  Build the library project then right click on it in the Solution Explorer and choose “Send to F# Interactive”.  In the interactive console you can test out your type provider.  IMPORTANT:  Before you try building your project again make sure to reset the interactive console, otherwise it will lock the DLLs and your build will fail.</p>
]]></content>
  </entry>
  
</feed>
