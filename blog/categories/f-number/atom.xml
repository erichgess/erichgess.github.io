<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: F# | Elegant Architecture]]></title>
  <link href="http://erichgess.github.io/blog/categories/f-number/atom.xml" rel="self"/>
  <link href="http://erichgess.github.io/"/>
  <updated>2016-04-10T11:36:09-04:00</updated>
  <id>http://erichgess.github.io/</id>
  <author>
    <name><![CDATA[Erich G. Ess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Data Structures: Set]]></title>
    <link href="http://erichgess.github.io/blog/2016/04/10/f-number-data-structures-set/"/>
    <updated>2016-04-10T11:15:48-04:00</updated>
    <id>http://erichgess.github.io/blog/2016/04/10/f-number-data-structures-set</id>
    <content type="html"><![CDATA[<p>As I’ve been going through Okasaki’s book on functional data structures, it occurred to
me that it’d also be a lot of fun to run through the F# implementation of it’s core data
structures and compare them with the book <em>Purely Functional Data Structures</em>.</p>

<p>It’s a lot of fun seeing how fundamental and still powerful the data structures used in
<em>Purely Functional Data Structures</em> are and has made reading through this book even more
satisfying.</p>

<p>The first significant data structure in Okasaki is the Set, which is implemented using
a binary search tree.  It’s simple enough to find the F# Core implementation of set in
the GitHub <a href="https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/set.fs#L17">repository</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">when</span> <span class="err">‘</span><span class="nc">T</span> <span class="o">:</span> <span class="n">comparison</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetEmpty</span>                                          <span class="c1">// height = 0 &lt;br /&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetNode</span> <span class="k">of</span> <span class="err">‘</span><span class="nc">T</span> <span class="o">*</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span>  <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="kt">int</span>    <span class="c1">// height = int </span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetOne</span>  <span class="k">of</span> <span class="err">‘</span><span class="nc">T</span>                                     <span class="c1">// height = 1 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and a little further down in the source file we find this definition of <code>Set</code>:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;[&lt;</span><span class="n">equalityconditionalon</span><span class="o">&gt;]</span><span class="k">&#39;</span><span class="nc">T</span> <span class="k">when</span> <span class="k">&#39;</span><span class="nc">T</span> <span class="o">:</span> <span class="n">comparison</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">comparer</span><span class="o">:</span><span class="nc">IComparer</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span> <span class="n">tree</span><span class="o">:</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></equalityconditionalon></p>

<p>So the <code>Set</code> type is definitely built on top of a binary search tree.  Now the question is,
what type of binary search tree:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">rebalance</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t1h</span> <span class="o">=</span> <span class="n">height</span> <span class="n">t1</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t2h</span> <span class="o">=</span> <span class="n">height</span> <span class="n">t2</span>
</span><span class='line'>    <span class="k">if</span>  <span class="n">t2h</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t1h</span> <span class="o">+</span> <span class="n">tolerance</span> <span class="k">then</span> <span class="c1">// right is heavier than left </span>
</span><span class='line'>        <span class="k">match</span> <span class="n">t2</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t2k</span><span class="o">,</span><span class="n">t2l</span><span class="o">,</span><span class="n">t2r</span><span class="o">,&lt;</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">// one of the nodes must have height &amp;gt; height t1 + 1 </span>
</span><span class='line'>            <span class="k">if</span> <span class="n">height</span> <span class="n">t2l</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t1h</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">then</span>  <span class="c1">// balance left: combination </span>
</span><span class='line'>                <span class="k">match</span> <span class="n">t2l</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t2lk</span><span class="o">,</span><span class="n">t2ll</span><span class="o">,</span><span class="n">t2lr</span><span class="o">,&lt;/</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2ll</span><span class="o">)</span> <span class="n">t2lk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t2lr</span> <span class="n">t2k</span> <span class="n">t2r</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>            <span class="k">else</span> <span class="c1">// rotate left </span>
</span><span class='line'>                <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2l</span><span class="o">)</span> <span class="n">t2k</span> <span class="n">t2r</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span>  <span class="n">t1h</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t2h</span> <span class="o">+</span> <span class="n">tolerance</span> <span class="k">then</span> <span class="c1">// left is heavier than right </span>
</span><span class='line'>            <span class="k">match</span> <span class="n">t1</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t1k</span><span class="o">,</span><span class="n">t1l</span><span class="o">,</span><span class="n">t1r</span><span class="o">,&lt;</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// one of the nodes must have height &amp;gt; height t2 + 1 </span>
</span><span class='line'>                <span class="k">if</span> <span class="n">height</span> <span class="n">t1r</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t2h</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>                    <span class="c1">// balance right: combination </span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">t1r</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t1rk</span><span class="o">,</span><span class="n">t1rl</span><span class="o">,</span><span class="n">t1rr</span><span class="o">,&lt;/</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                        <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1l</span> <span class="n">t1k</span> <span class="n">t1rl</span><span class="o">)</span> <span class="n">t1rk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1rr</span> <span class="n">k</span> <span class="n">t2</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">mk</span> <span class="n">t1l</span> <span class="n">t1k</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1r</span> <span class="n">k</span> <span class="n">t2</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So F# is using what looks like a slightly modified AVL tree, which uses a definable
tolerance for how unbalanced the tree can get before rebalancing happens.  The
strict AVL tree rebalances if the difference in height between the left and right
branches is greater than 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purely Functional Data Structures: Chapter 2 - Binary Search Trees]]></title>
    <link href="http://erichgess.github.io/blog/2016/03/21/purely-functional-data-structures-chapter-2-binary-search-trees/"/>
    <updated>2016-03-21T22:41:37-04:00</updated>
    <id>http://erichgess.github.io/blog/2016/03/21/purely-functional-data-structures-chapter-2-binary-search-trees</id>
    <content type="html"><![CDATA[<p>The second section of Chapter 2 deals focuses on binary search trees (BST) and uses BSTs to
implement a set data structure.  Like the section
on lists, this gives a nice little explanation on how to deal with inserts to a tree data
structure when the data is immutable in as efficient a way as possible.  The most brute
force solution to this would be to create a complete duplicate of the tree save for the
newly added value, this section shows that, while copying is necessary, only the search
path from the root to the new element needs to be copied.  The new tree will then reference
as much of the old tree as possible; minimizing both copies and memory used.</p>

<p>What this post will cover:  how to represent a binary search tree (BST) in F#, how to efficiently
update the BST while using immutable data structures, and some discussion on design and style.</p>

<!-- more -->

<p>First thing:  how to represent the binary search tree in F#.  A BST has two possible values:
it’s either Empty or it’s a some value with 2 children.  So a discriminated union captures
this set and a tuple can store the value and 2 children.  Leading, as with the list, to
a recursive type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="nc">Empty</span> <span class="o">|</span> <span class="nc">Tree</span> <span class="k">of</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">Tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The Tree on the left of <code>Tree&lt;'a&gt; * 'a * Tree&lt;'a&gt;</code> stores the left branch and the right
<code>Tree</code> stores the right branch.</p>

<p>A requirement for a BST is that <code>'a</code> must have a total ordering:  you must be able to take
any two values of type <code>'a</code> and check if one is less than the other.  The above definition
does not capture this requirement and so we can make a <code>Tree</code> of any type.  In Purely
Functional Data Structure this is solved by using ML’s <em>functor</em> feature, which F# doesn’t
have.  In F# this can be captured using a <em>constraint</em> on the type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">BinarySearchTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span> <span class="k">when</span> <span class="err">‘</span><span class="n">a</span><span class="o">:</span> <span class="n">comparison</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Tree</span> <span class="k">of</span> <span class="nc">BinarySearchTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">BinarySearchTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>'a when 'a: comparison</code> tells the F# compiler that <code>'a</code> must implement the IComparable
interface which guarantees that the <code>&lt;</code> operator can be used on two values of type <code>'a</code>.</p>

<p>I changed the name of the type from <code>Tree</code> to <code>BinarySearchTree</code> to capture the more focused
nature of the type when a constraint is added.  The <code>Tree</code> can be use to create any type of
binary tree structure, with the constraint the type becomes focused specifically on ordering
and searching.  The updated name helps to reflect this focus.  This type could also be put
into a <code>module</code> named <em>BinarySearchTree</em> to capture that information and then keep the type
named simply <em>Tree</em>.  However, I am not yet sure which is superior, though I feel that
capturing the nature of the type, intrinsically, in the name so that it can’t be seperated
is the better path to follow.</p>

<p>As a note, there is another option with F# for capturing the comparability requirement. We
don’t have to put the constraint in the type definition.  When we write our <code>insert</code> and
<code>search</code> functions, the F# compiler with infer that, for <em>those</em> functions, <code>'a</code> must
have the <code>comparison</code> constraint.  This decouples the use of the tree from the type definition.
If we want the type to capture only the structure of a binary tree, then this approach makes
sense.  However, if we want the type to capture both the structure and the purpose (searching)
then this approach seems like it will be fragile and confusing.</p>

<p>I initially thought that there was a third option:  add the search and insert functions as
member methods to the definition of <code>Tree</code>.  It seemed likely that the F# compiler would
infer that <code>'a</code> must have the <code>comparison</code> constraint.  Testing proved that this is not the
case and, in fact, the compiler throws an error because <code>Tree</code> must explicitly have the
<code>comparison</code> constraint in order for the member methods to work.</p>

<h3 id="ismember">IsMember</h3>
<p>Checking membership in the tree is the first of the two absolutely necessary functions
for our BST.  The logic is rather simple, but here I’ve started trying out the <code>function</code>
  structure for when I’m writing a “polymorphic” function and leaving out explicity
  parameters.  I rarely used the <code>function</code> expression in the past so this is helping
  me to get a feel for this as a part of my toolbox.</p>

<p>Leaving out the parameters in the 
function definition is the <a href="https://en.wikipedia.org/wiki/Tacit_programming">point free</a> 
style of programming.  Since point free style cuts out one source of self documentation
in code, I’m not sure I really like it.  However, it fits well with the <code>function</code> expression
since the focus is the <em>patterns</em> that are being matched and that documents the parameters
well enough.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">isMember</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="nc">Empty</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">false</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">))</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="n">isMember</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span>   <span class="c1">// Experimenting with a new format for if/then.  I like having the condition and it’s direct conclusion on the same line</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="n">isMember</span><span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">r</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="bp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="insert">Insert</h3>
<p>The insert function is a little more complex than <code>isMember</code>:  it needs to handle inserting
a new value into an immutable tree data structure:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">insert</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">s</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">s</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Tree</span> <span class="o">(</span><span class="nc">Empty</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">insert</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">l</span><span class="o">),</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">insert</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">r</span><span class="o">))</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">s</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>insert</code> travels from the root node, down the tree, visiting only the nodes on the way to
where the new node will get inserted.  This is called the <em>search path</em>.  As it moves, 
<code>insert</code> makes a copy of each node on the search path.  The nodes are copied so that they
can store the path to the new value, the nodes on the search path are the minimum number
of nodes that need to be copied.  And of course, because data is immutable, we have to
copy some nodes in order to make our insert.</p>

<p>This diagram shows what’s happening in a nicely visual form.  The brown nodes are the
copied nodes on the search path, the dashed lines represent the new links in those nodes.
Note that most of the original tree remains used in the new ‘post insert’ tree.  A copy of
<code>7</code> was made and it’s left child is the new <code>5</code> node, then a copy of <code>4</code> is made so that
<code>4</code>’s right points to the new <code>7</code>.  <code>4</code>’s left still points to the old tree.
<img src="/images/posts/purefds_ch2/bst_insert.png"></p>

<h3 id="problem-22">Problem 2.2</h3>
<p>In this problem, we have to update <code>isMember</code> to reduce the number of conditions in the
execution path.  This is done by propagating the last checked value through the traversal
and removing the <code>&gt;</code> check:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">isMember2</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">check</span> <span class="o">=</span> <span class="k">function</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="bp">false</span><span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">prev</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="n">x</span> <span class="o">=</span> <span class="n">prev</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">r</span><span class="o">))</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="n">check</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">check</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">check</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>isMember2</code> was my first attempt.  While the last pattern matching expression has only
one conditional rather than two, it also has an additional pattern match check and so
it seems unlikely that the number of condition checks is actually reduced.  I took a look
at the IL for this code and verified that it does indeed have just as many conditions
as `isMember.  The worst part is, that pattern match check must get executed every time.</p>

<p>My second attempt became less idiomatic but it successfully reduces the number of 
required conditionals:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">isMember2</span><span class="err">’</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">:</span> <span class="err">‘</span><span class="n">a</span> <span class="n">option</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>  <span class="k">if</span> <span class="n">prev</span><span class="o">.</span><span class="nc">IsSome</span> <span class="k">then</span> <span class="n">x</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="nc">Value</span> <span class="k">else</span> <span class="bp">false</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">,</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">r</span><span class="o">))</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="n">isMember2</span><span class="err">’</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">None</span><span class="o">,</span> <span class="n">l</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">isMember2</span><span class="err">’</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>While working on this code, I noticed that in F# I’m much more comfortable writing
<code>if</code> expressions on a single line.  In other languages, I almost never do this (not
counting the ternary operator in the C family).</p>

<h3 id="problem-23-improving-insert">Problem 2.3: improving insert</h3>
<p>If we insert a value that’s already in the tree, then the resulting tree will be
identical to the input tree.  However, the current <code>insert</code> function will still
copy all the nodes on the search path.  This problem Okasaki has us fix that by
throwing a fault if the value is already in the tree.  This will bubble a break
up through the recursive path and break the execution path before any copies
are made:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">insert2</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">s</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">s</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Tree</span> <span class="o">(</span><span class="nc">Empty</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="n">n</span><span class="o">,</span><span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">insert2</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">l</span><span class="o">),</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">n</span> <span class="k">then</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">insert2</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span><span class="n">r</span><span class="o">))</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">failwith</span> <span class="err">“</span><span class="nc">Element</span> <span class="n">already</span> <span class="n">exists</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, we combine this update with the update to <code>isMember</code> to optimize insertion
even more:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">insert3</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">:</span> <span class="err">‘</span><span class="n">a</span> <span class="n">option</span><span class="o">,</span> <span class="n">t</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">if</span> <span class="n">prev</span><span class="o">.</span><span class="nc">IsSome</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="nc">Value</span>
</span><span class='line'>             <span class="k">then</span> <span class="n">failwith</span> <span class="err">“</span><span class="nc">Element</span> <span class="n">already</span> <span class="n">exists</span><span class="err">”</span>
</span><span class='line'>             <span class="k">else</span> <span class="nc">Tree</span> <span class="o">(</span><span class="nc">Empty</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">then</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">insert3</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">prev</span><span class="o">,</span> <span class="n">l</span><span class="o">),</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="nc">Tree</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">insert3</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="nc">Some</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purely Functional Data Structures: Chapter 2 - Lists]]></title>
    <link href="http://erichgess.github.io/blog/2016/03/21/purely-functional-data-structures-chapter-2-lists/"/>
    <updated>2016-03-21T21:40:30-04:00</updated>
    <id>http://erichgess.github.io/blog/2016/03/21/purely-functional-data-structures-chapter-2-lists</id>
    <content type="html"><![CDATA[<p>Chapter 2 covers the efficient implementation of stack and binary search 
trees when your data structures
must be immutable.  This chapter wound up being a lot of fun to work on because
it helped me focus a lot on how to approach structuring my F# code and start
laying the foundation for how to approach building elegant F# code.</p>

<!-- more -->

<h2 id="stacks">Stacks</h2>
<p>There are two implementations of the stack in this chapter.  The first is
rather uninteresting and the second is significantly more educational.  This
section on Lists appeared to be more focused on using lists to represent
other data structures in this case to build a stack data structure.</p>

<h3 id="using-lists">Using Lists</h3>
<p>The first implementation is merely built on top of the existing list
data structure.  Below is the direct conversion into F#:</p>

<p><code>fsharp
module Lists =
  type ListStack&lt;'a&gt; =
    'a list
  let Empty:ListStack&lt;_&gt; = []
  let isEmpty s = List.isEmpty s
  let cons a s:ListStack&lt;_&gt; = a :: s
  let hd s = List.head s
  let tl s = List.tail s
</code></p>

<p>There really wasn’t a whole lot of interesting stuff in this first example.</p>

<h3 id="custom-stack">Custom Stack</h3>
<p>The second section is much more fun:  a custom data structure is built to
represent the stack.  Built as a recursively nested tuple.  Which is
actually identical to the traditional way of representing a regular list.
This provides a nice way of building up an immutable list from primitives
(tuples) in order to build a more complex data structure (a stack).</p>

<p>This was also the first part where I had an opportunity to experiment
with how to write this well in F# and reason through the pros and cons
of a specific approach.  My first attempt was to get as close to the 
book as possible and I used a <code>type</code> with member methods to group the
<code>CustomStack</code> with its associated functions.  The second approach uses
<code>module CustomStack</code> to group the type with the associated functions.</p>

<p>```fsharp
type CustomStack&lt;’a&gt; =
  | Empty
  | Cons of ‘a * CustomStack&lt;’a&gt;
with
  static member empty = Empty
  // Note:
  // I tried naming this IsEmpty but it won’t compile
  // F# auto generates Is* functions for each element of a DU.
  static member CheckEmpty = function
                          | Empty -&gt; true
                          | _ -&gt; false</p>

<p>static member cons (x, s) =
    Cons(x, s)</p>

<p>static member head = function
    | Empty -&gt; failwith “empty”
    | Cons(x, _) -&gt; x</p>

<p>static member tail s =
    match s with
    | Empty -&gt; failwith “empty”
    | Cons(x, Empty) -&gt; x
    | Cons(x, s) -&gt; CustomStack&lt;’a&gt;.tail s
```</p>

<p>The first thing I learned was that the F# compiler autogenerates a function
called <code>IsEmpty</code>.  Despite working with the language for several months,
I’d somehow never noticed that when you create a discriminated union type
F# automatically adds member methods for check if a value is a specific
element in the discriminated union.</p>

<p>Using static member methods to group the related functions to the type didn’t
feel particularly elegant:  you’d always have to prepend all calls to functions
with <code>CustomStack.</code>.  So I tried using another approach:  using a 
module named <code>CustomStack</code> to group the functions with the type.  This would
provide the option of just calling the functions or prepending the module
name (<code>CustomStack.</code>).</p>

<p>```fsharp
module CustomStack =
  type CustomStack&lt;’a&gt; = Empty | Cons of ‘a * CustomStack&lt;’a&gt;
  let empty = Empty</p>

<table>
  <tbody>
    <tr>
      <td>let isEmpty = function Empty -&gt; true</td>
      <td>_ -&gt; false</td>
    </tr>
  </tbody>
</table>

<p>let cons (x,s) = Cons(x, s)</p>

<p>let head = function
    | Empty -&gt; failwith “empty”
    | Cons(x,_) -&gt; x</p>

<p>let tail = function
    | Empty -&gt; failwith “empty”
    | Cons(_, s) -&gt; s</p>

<p>let rec (++) a b =
    match a with
    | Empty -&gt; b
    | Cons(x, s) -&gt; Cons(x, s ++ b)</p>

<p>let rec update = function
    | (Empty, <em>, _) -&gt; failwith “subscript is invalid”
    | (Cons(</em>, s), 0, x) -&gt; Cons(x, s)
    | (Cons(_, s), i, x) when i &gt; 0 -&gt; update (s, i-1, x)
    | _ -&gt; failwith “subscript is invalid”
```</p>

<p>This version felt much better to me, I also took the opportunity to create
an operator <code>++</code> for appends.  There is an interesting consequence that
this approach creates by disconnecting the type parameter restrictions
that functions require from the type definition; this will come up
explicitly in the binary search trees section.</p>

<p>I tried a slightly different format for <code>type CustomStack</code> and <code>isEmpty</code>:
placing the patterns on one line.  I’m not sure how I feel about
this approach.  It seems very easy to miss the <code>|</code> and not properly
see the pattern definitions.  Having everything on one line also
implies that everything is part of the same operation and that is
decidely not the case with pattern matching and DU definitions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern Matching With Pipes]]></title>
    <link href="http://erichgess.github.io/blog/2016/03/19/pattern-matching-with-pipes/"/>
    <updated>2016-03-19T12:09:26-04:00</updated>
    <id>http://erichgess.github.io/blog/2016/03/19/pattern-matching-with-pipes</id>
    <content type="html"><![CDATA[<p>One of my favorite things to do in F# is pipe functions together.  I like the elegant flow that the
semantics visualizes and the fact that it removes the need for intermediate variables.  Given that,
one of the minor, but consistent, annoyances I’ve had is when piping a DU type which generally need
to be piped into a pattern match expression.  This is annoying because the <code>match</code> expression doesn’t
lend itself to piping which has meant that my nice workflow needs to be broken up with an intermediate
variable that can be used in the <code>match</code> expression.</p>

<p>Looking at some old code I wrote, I just realized something that is probably pretty obvious to every
experienced F# programmer out there.  The <code>function</code> expression actually does exactly what <code>match</code> does
but it creates a function and that’s exactly what I’ve been wanting this whole time!</p>

<!-- more -->

<p>Here is a quick and dirty example of using a function which takes a value and returns  a discriminated
union.  The type of function which almost always means that pattern matching will have to be done with
its result:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">DU</span> <span class="o">=</span>
</span><span class='line'><span class="o">|</span> <span class="nc">A</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'><span class="o">|</span> <span class="nc">B</span> <span class="k">of</span> <span class="kt">string</span>
</span><span class='line'><span class="o">|</span> <span class="nc">C</span> <span class="k">of</span> <span class="kt">bool</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">doSomething</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">x</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="mi">0</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">A</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">x</span> <span class="k">when</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">B</span><span class="o">(</span><span class="err">“</span><span class="n">zero</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">C</span><span class="o">(</span><span class="bp">true</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Previously, I always used one of the two following styles (<code>style_1</code> and <code>style_2</code>):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">style_1</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">du</span> <span class="o">=</span> <span class="n">doSomething</span> <span class="n">x</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">match</span> <span class="n">du</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">A</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">d</span><span class="err">”</span> <span class="n">i</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">B</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="n">s</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">C</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">b</span><span class="err">”</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">style_2</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">x</span>
</span><span class='line'>  <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">doSomething</span>
</span><span class='line'>  <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">fun</span> <span class="n">a</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">match</span> <span class="n">a</span> <span class="k">with</span>
</span><span class='line'>              <span class="o">|</span> <span class="nc">A</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">d</span><span class="err">”</span> <span class="n">i</span>
</span><span class='line'>              <span class="o">|</span> <span class="nc">B</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="n">s</span>
</span><span class='line'>              <span class="o">|</span> <span class="nc">C</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">b</span><span class="err">”</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Both <code>style_1</code> and <code>style_2</code> leave a lot to be desired.  Both <code>style_1</code> and <code>style_2</code> require the use of an intermediate variable and 
<code>style_2</code> needs the clunky <code>fun a -&gt;</code> rigging.  The choice between two types of clunkiness always frustrated me,
because I felt that there must be some easy way to pipe the result of a function into a pattern match.</p>

<p>The pattern matching <code>function</code> makes it possible to elegantly integrate a pattern match into a <code>|&gt;</code> flow.
Here’s my new style implementation of the above code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">style_3</span> <span class="n">x</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">x</span>
</span><span class='line'>  <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">doSomething</span>
</span><span class='line'>  <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">function</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">A</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">d</span><span class="err">”</span> <span class="n">i</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">B</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="err">”</span> <span class="n">s</span>
</span><span class='line'>     <span class="o">|</span> <span class="nc">C</span><span class="o">(</span><span class="n">b</span><span class="o">)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">printfn</span> <span class="err">“</span><span class="o">%</span><span class="n">b</span><span class="err">”</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is no profound revelation or anything, but it’s a tiny step closer to producing truly
elegant F# code.  That makes me supremely happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zippers 2: Building a Rose Tree Zipper]]></title>
    <link href="http://erichgess.github.io/blog/2015/11/01/zippers-2-building-a-rose-tree-zipper/"/>
    <updated>2015-11-01T09:38:55-05:00</updated>
    <id>http://erichgess.github.io/blog/2015/11/01/zippers-2-building-a-rose-tree-zipper</id>
    <content type="html"><![CDATA[<p>As a follow up to my post about Zippers for lists and binary trees, I wanted to create a zipper for
a slightly more complex data structure.  The Rose Tree is a tree structure where the number of
branches a node may have is variable.  An example of a rose tree would be the directory structure
on your computer:  each directory may contain 0 or more sub directories which, in turn, may contain
addition subdirectories.  With this example in mind, the zipper is analagous to you moving through
your computers file system:  starting at the root directory and using <code>cd</code> to move down a branch
and <code>cd ..</code> to move back.</p>

<!-- more -->

<h2 id="rose-tree-implementation">Rose Tree Implementation</h2>
<p>The implementation of a rose tree is pretty simple.  It’s just like a binary tree but, instead of
each node having two branches, each node has a list of branches:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">RoseTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">RoseTree</span> <span class="k">of</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="o">(</span><span class="nc">RoseTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The zipper of the rose tree, however, is a lot more interesting and fun.  It’s basically a
combination of the binary tree zipper and the list zipper:  you need a tree zipper to keep track
of where in the tree you are by level and a list zipper to keep track of where in the each node’s
list of branches you are.</p>

<p>Algebraicly, the rose tree is:
<script type="math/tex">R = 1 + a\cdot L(R)</script></p>

<p>Where <script type="math/tex">L(R)</script> is a list of rose trees.</p>

<p>The derivative is:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{eqnarray} 
\partial_aR &=& L(R) + a\partial_aL(R)\partial_aR \\
\partial_aR - a\partial_aL(R)\partial_aR &=& L(R) \\
(1 - a\partial_aL(R))\partial_aR &=& L(R) \\
\partial_aR &=& \frac{L(R)}{1-a\partial_aL(R)} \\
&=& L(R)\frac{1}{1 - a\partial_aL(R)} \\
&=& L(R)L(a\partial_aL(R)) \\
&=& L(R)L(aL^2(R)) \\
\end{eqnarray}
 %]]&gt;</script>

<p>The next to last step uses the identity <script type="math/tex">L(a) = \frac{1}{1 - a}</script> to arrive at <script type="math/tex">L(R)L(aL^2(R))</script>.</p>

<p>This translates to the type:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">RoseTreeZipper</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">=</span> <span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">RoseTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span> <span class="o">*</span> <span class="o">((</span><span class="err">‘</span><span class="n">a</span> <span class="o">*</span> <span class="nc">RoseTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span> <span class="o">*</span> <span class="nc">RoseTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="n">a</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="kt">list</span><span class="o">)</span> <span class="kt">list</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
and that looks pretty insane.</p>

<p>However, it does make sense.  Here’s the break down.  The first part <code>'a</code> is the value of the current
node and the <code>RoseTree&lt;'a&gt; list</code> is the list of branches at this node.  So, together
<code>'a * RoseTree&lt;'a&gt; list</code> is the cursors current position in the rose tree.</p>

<p>Now here’s the break down for <code>('a * RoseTree&lt;'a&gt; list * RoseTree&lt;'a&gt; list) list</code>.  This is a list of
the previous positions the cursor had in the rose tree, just like we saw with the binary tree zipper.
The <code>'a</code> is the value of the node the cursor used to point at.  The tuple <code>RoseTree&lt;'a&gt; list * RoseTree&lt;'a&gt; list</code>
is all the branches of the node except where the cursor is currently at!  The first <code>RoseTree&lt;'a&gt; list</code>
is the branches to the left of the branch down which the cursor went and the second <code>RoseTree&lt;'a&gt; list</code>
is all the branches to the right!</p>

<p>To help clarify how the rose tree zipper works, here’s a visual explanation.</p>

<p>The color green indicates the position of the cursor.</p>

<p>Here we are with a newly created zipper on a rose tree.  The cursor is pointing to the root of the tree
<img src="http://erichgess.github.io/assets/zippers/rosetree_1.png" alt="My helpful screenshot" /></p>

<p>We’ll move the cursor down to the middle branch.  The root of the tree and the left and right branches
are then moved into the history list for the cursor.  The color blue is used to show that all those
nodes are grouped together as one entry in the history list.
<img src="http://erichgess.github.io/assets/zippers/rosetree_2.png" alt="Moving the cursor" /></p>

<p>Here’s a visual of the rose tree zipper value after the cursor is moved to the middle node.  The cursor
points to (C, [G; H]), corresponding to the <code>'a * RoseTree&lt;'a&gt; list</code> in the zipper type.  The previous
cursor position corresponds to the list of <code>'a * RoseTree&lt;'a&gt; list * RoseTree&lt;'a&gt; list</code>.
<img src="http://erichgess.github.io/assets/zippers/rosetree_2_note.png" alt="The zipper type" /></p>

<p>Moving the cursor down the left branch, the previous node and the right branch are colored to indicate
that they are grouped together and prepended to the history list.
<img src="http://erichgess.github.io/assets/zippers/rosetree_3.png" alt="Move cursor down left branch" /></p>

<p>Visualizing the new rose tree zipper value.  <code>C, H</code> have been moved to the head of the history list.
<img src="http://erichgess.github.io/assets/zippers/rosetree_3_note.png" alt="New rose tree zipper value" /></p>
]]></content>
  </entry>
  
</feed>
