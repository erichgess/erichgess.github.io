<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data Structures | Elegant Architecture]]></title>
  <link href="http://erichgess.github.io/blog/categories/data-structures/atom.xml" rel="self"/>
  <link href="http://erichgess.github.io/"/>
  <updated>2016-04-10T11:36:09-04:00</updated>
  <id>http://erichgess.github.io/</id>
  <author>
    <name><![CDATA[Erich G. Ess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Data Structures: Set]]></title>
    <link href="http://erichgess.github.io/blog/2016/04/10/f-number-data-structures-set/"/>
    <updated>2016-04-10T11:15:48-04:00</updated>
    <id>http://erichgess.github.io/blog/2016/04/10/f-number-data-structures-set</id>
    <content type="html"><![CDATA[<p>As I’ve been going through Okasaki’s book on functional data structures, it occurred to
me that it’d also be a lot of fun to run through the F# implementation of it’s core data
structures and compare them with the book <em>Purely Functional Data Structures</em>.</p>

<p>It’s a lot of fun seeing how fundamental and still powerful the data structures used in
<em>Purely Functional Data Structures</em> are and has made reading through this book even more
satisfying.</p>

<p>The first significant data structure in Okasaki is the Set, which is implemented using
a binary search tree.  It’s simple enough to find the F# Core implementation of set in
the GitHub <a href="https://github.com/fsharp/fsharp/blob/master/src/fsharp/FSharp.Core/set.fs#L17">repository</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="k">when</span> <span class="err">‘</span><span class="nc">T</span> <span class="o">:</span> <span class="n">comparison</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetEmpty</span>                                          <span class="c1">// height = 0 &lt;br /&gt;</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetNode</span> <span class="k">of</span> <span class="err">‘</span><span class="nc">T</span> <span class="o">*</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span>  <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="err">’</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">*</span> <span class="kt">int</span>    <span class="c1">// height = int </span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">SetOne</span>  <span class="k">of</span> <span class="err">‘</span><span class="nc">T</span>                                     <span class="c1">// height = 1 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and a little further down in the source file we find this definition of <code>Set</code>:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;[&lt;</span><span class="n">equalityconditionalon</span><span class="o">&gt;]</span><span class="k">&#39;</span><span class="nc">T</span> <span class="k">when</span> <span class="k">&#39;</span><span class="nc">T</span> <span class="o">:</span> <span class="n">comparison</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">comparer</span><span class="o">:</span><span class="nc">IComparer</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;,</span> <span class="n">tree</span><span class="o">:</span> <span class="nc">SetTree</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="k">&#39;</span><span class="nc">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></equalityconditionalon></p>

<p>So the <code>Set</code> type is definitely built on top of a binary search tree.  Now the question is,
what type of binary search tree:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">rebalance</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t1h</span> <span class="o">=</span> <span class="n">height</span> <span class="n">t1</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t2h</span> <span class="o">=</span> <span class="n">height</span> <span class="n">t2</span>
</span><span class='line'>    <span class="k">if</span>  <span class="n">t2h</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t1h</span> <span class="o">+</span> <span class="n">tolerance</span> <span class="k">then</span> <span class="c1">// right is heavier than left </span>
</span><span class='line'>        <span class="k">match</span> <span class="n">t2</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t2k</span><span class="o">,</span><span class="n">t2l</span><span class="o">,</span><span class="n">t2r</span><span class="o">,&lt;</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">// one of the nodes must have height &amp;gt; height t1 + 1 </span>
</span><span class='line'>            <span class="k">if</span> <span class="n">height</span> <span class="n">t2l</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t1h</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">then</span>  <span class="c1">// balance left: combination </span>
</span><span class='line'>                <span class="k">match</span> <span class="n">t2l</span> <span class="k">with</span>
</span><span class='line'>                <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t2lk</span><span class="o">,</span><span class="n">t2ll</span><span class="o">,</span><span class="n">t2lr</span><span class="o">,&lt;/</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2ll</span><span class="o">)</span> <span class="n">t2lk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t2lr</span> <span class="n">t2k</span> <span class="n">t2r</span><span class="o">)</span>
</span><span class='line'>                <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>            <span class="k">else</span> <span class="c1">// rotate left </span>
</span><span class='line'>                <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2l</span><span class="o">)</span> <span class="n">t2k</span> <span class="n">t2r</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">if</span>  <span class="n">t1h</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t2h</span> <span class="o">+</span> <span class="n">tolerance</span> <span class="k">then</span> <span class="c1">// left is heavier than right </span>
</span><span class='line'>            <span class="k">match</span> <span class="n">t1</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t1k</span><span class="o">,</span><span class="n">t1l</span><span class="o">,</span><span class="n">t1r</span><span class="o">,&lt;</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// one of the nodes must have height &amp;gt; height t2 + 1 </span>
</span><span class='line'>                <span class="k">if</span> <span class="n">height</span> <span class="n">t1r</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">t2h</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">then</span>
</span><span class='line'>                    <span class="c1">// balance right: combination </span>
</span><span class='line'>                    <span class="k">match</span> <span class="n">t1r</span> <span class="k">with</span>
</span><span class='line'>                    <span class="o">|</span> <span class="nc">SetNode</span><span class="o">(</span><span class="n">t1rk</span><span class="o">,</span><span class="n">t1rl</span><span class="o">,</span><span class="n">t1rr</span><span class="o">,&lt;/</span><span class="n">em</span><span class="o">&gt;)</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>                        <span class="n">mk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1l</span> <span class="n">t1k</span> <span class="n">t1rl</span><span class="o">)</span> <span class="n">t1rk</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1rr</span> <span class="n">k</span> <span class="n">t2</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">mk</span> <span class="n">t1l</span> <span class="n">t1k</span> <span class="o">(</span><span class="n">mk</span> <span class="n">t1r</span> <span class="n">k</span> <span class="n">t2</span><span class="o">)</span>
</span><span class='line'>            <span class="o">|</span> <span class="o">_</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">failwith</span> <span class="err">“</span><span class="n">rebalance</span><span class="err">”</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">mk</span> <span class="n">t1</span> <span class="n">k</span> <span class="n">t2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So F# is using what looks like a slightly modified AVL tree, which uses a definable
tolerance for how unbalanced the tree can get before rebalancing happens.  The
strict AVL tree rebalances if the difference in height between the left and right
branches is greater than 1.</p>
]]></content>
  </entry>
  
</feed>
