<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design | Elegant Architecture]]></title>
  <link href="http://erichgess.github.io/blog/categories/design/atom.xml" rel="self"/>
  <link href="http://erichgess.github.io/"/>
  <updated>2015-01-10T18:22:53-06:00</updated>
  <id>http://erichgess.github.io/</id>
  <author>
    <name><![CDATA[Erich G. Ess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a RabbitMQ Library in F#]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/06/building-a-rabbitmq-library-in-f-number/"/>
    <updated>2014-03-06T09:44:30-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/06/building-a-rabbitmq-library-in-f-number</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing a lot of experimenting with F# and distributed computing via messaging.  As evidenced by my previous, I&rsquo;m using RabbitMQ as my messaging platform, for a couple of reasons: it&rsquo;s easy to use, it&rsquo;s free and open source, and I might decide to switch to RabbitMQ at work.  I&rsquo;ve been having a lot of fun experimenting with RabbitMQ and F#.  However, I spend a lot of my time just writing and copy/pasting the boilerplate code needed to configure the RabbitMQ client libraries, add the fact that the .Net client library is written for C#, and you get a constant block of boring work.  So, purely for fun and profit, I&rsquo;m going to write a quick F# wrapper.  The purpose of it being to let me very quickly setup RabbitMQ and, just as importantly, work with RabbitMQ in a manner that better fits F#.</p>

<!-- more -->


<h2>Design</h2>

<p>I want to use this as an opportuntity to practice all of my engineering skills.  So, I&rsquo;m going to start by defining the problem I want to solve, the scope of work, and then the design itself.  For the problem: I will try to understand what my needs are, right now, and predict what they will be in the future.  For the scope of work:  RabbitMQ has a lot of stuff, so I will use the definition of the problem to decide how much of the RabbitMQ framework I will expose with my wrapper.  The design:  this is when I will figure out how I want to use this library and how to make it fit the F#/functional paradigm.  I will do all of this, before I start writing any code!</p>

<h4>The Problem(s)</h4>

<p>Right now, I have two problems when I&rsquo;m trying to do a messaging experiment in F#:</p>

<ol>
<li>I have to rewrite the RabbitMQ setup code every time I make a new endpoint.</li>
<li>It&rsquo;s OO/C# focused design doesn&rsquo;t fit very well with F#.  It works, but, I think, it will be better if it&rsquo;s functional.</li>
<li>Long term, I&rsquo;d like to make up a simple RabbitMQ F# Client library which anyone could use.</li>
</ol>


<p>I threw number 3 on there, not because it is a problem I am trying to solve right now, but because this something which could contribute to the F# community.  By keeping this in mind as a long term goal, it will help me write my solution so that it is easy to expand.</p>

<h4>The Scope</h4>

<p>For scope, I&rsquo;ll look at the first two problems and ignore the third.  Problem 2 shouldn&rsquo;t impact the scope very much, as it&rsquo;s really a restriction on my design:  make the design fit the functional paradigm.  Problem 1 definitely can impact the scope of work:  there is a lot to RabbitMQ and doing a full client implementation in F# would be a LOT of work.  To define the scope of work I am going to do, I&rsquo;ll focus on explicitly writing out my needs and then only do the amount of work necessary to meet those needs.</p>

<h5>Problem 1 Needs</h5>

<p>I am doing very little with RabbitMQ in my experiments.  I am not using subjects, or fan-out exchanges, or anything; except making queues, publishing messages to the queue, and reading from the queue.  The messages, for this post, will also just be simple text messages, so no serialization/deserialization.  So this is all I need (in version 1 :) ):</p>

<ol>
<li>Create a queue on a RabbitMQ server</li>
<li>Publish a message to a specific queue</li>
<li>Read messages from a specific queue</li>
<li>Messages are just text messages</li>
</ol>


<p>Easy Enough!  My first version of the RabbitMQ F# client will only do those 3 things.</p>

<h5>Problem 2 Needs</h5>

<p>This is purely aesthetic.  The more I worke in F#, the more I find writing up classes and implementing interfaces to feel a bit &ldquo;ehhh&rdquo;.  So I want to make the way a developer uses and interacts with RabbitMQ to be more functional.  This is a bit more vague than I&rsquo;d like, because this will require a bit more learning on my part; which is why I put it here!</p>

<h5>Scope</h5>

<p>At the end of all of this, my library will do just provide these three features:</p>

<ol>
<li>Connect to or create a specified queue on a RabbitMQ server</li>
<li>Provide a way to publish messages to the queue</li>
<li>Provide a way to read messages from the queue</li>
</ol>


<p>Behind the scenes it will do whatever setup/teardown is needed to get those 3 features to work.</p>

<h4>The Design</h4>

<p>The design needs to be more functional than OO, so that it fits better with the general aesthetic flow of writing F#.  Being new to functional design, I&rsquo;ll start with the <a href="http://simontcousins.azurewebsites.net/manifesto/">NOOO Manifesto</a> as my guide:</p>

<ul>
<li>Functions and Types over classes</li>
<li>Purity over mutability</li>
<li>Composition over inheritance</li>
<li>Higher-order functions over method dispatch</li>
<li>Options over nulls</li>
</ul>


<p>In my next post, I&rsquo;ll start the actual implementation of my library.</p>
]]></content>
  </entry>
  
</feed>
