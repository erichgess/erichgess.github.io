<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Elegant Architecture]]></title>
  <link href="http://erichgess.github.io/atom.xml" rel="self"/>
  <link href="http://erichgess.github.io/"/>
  <updated>2015-01-10T18:22:53-06:00</updated>
  <id>http://erichgess.github.io/</id>
  <author>
    <name><![CDATA[Erich G. Ess]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[It's Been 8 Months]]></title>
    <link href="http://erichgess.github.io/blog/2015/01/10/its-been-8-months/"/>
    <updated>2015-01-10T17:42:32-06:00</updated>
    <id>http://erichgess.github.io/blog/2015/01/10/its-been-8-months</id>
    <content type="html"><![CDATA[<p>It has been quite a long time since my last blog post.  Quite a lot has happened in that time.  I moved from San Diego to Chicago.  I got a new job and now the CTO for a small start up company out in Chicago.  I have switched off of Windows development to Linux development.  I have gone though doing my work on a Windows box, to a Linux box, and now I&rsquo;m on a MacBook.  I have been doing a lot of learning about Cassandra, Python, Clojure, and Spark.  I have been learning about data science and machine learning.</p>

<p>It&rsquo;s been an exciting and challenging year for me.</p>

<p>I also realized that I miss writing posts (though I only did a few) which help me organize my thoughts and enforce new things which I have learned.</p>

<p>So, now I&rsquo;ll be kicking that learning off again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers Tutorial Part 4 - Base Types]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/17/type-providers-tutorial-part-4/"/>
    <updated>2014-04-17T00:09:16-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/17/type-providers-tutorial-part-4</id>
    <content type="html"><![CDATA[<p>In Part 3 of this Tutorial, I talked a little about erased types and how the types we generate are actually built on top of a <code>obj</code>.  Previously, I just used a plan <code>obj</code> type and cast an integer to and from the <code>obj</code> types.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="mi">0</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using just the basic <code>obj</code> works well enough for a very simple generated type (like the simple integer from part 3).  However, it becomes a bit of a mess when you want to make anything complicated.</p>

<p>In this part, we will update our Type Provider to use a more advanced type as our base type.</p>

<!-- more -->


<p>The ultimate goal of this tutorial is to build a type provider, which takes a schema for a data source and generates a type which matches that schema.  For example, suppose our data source is a table with 3 columns labeled &ldquo;Tom&rdquo;, &ldquo;Dick&rdquo;, and &ldquo;Harry&rdquo;, all three of integer type.  Then the type provider shall generate a type with 3 fields labeled &ldquo;Tom&rdquo;, &ldquo;Dick&rdquo;, and &ldquo;Harry&rdquo; of type <code>int</code>.  To make coding this managable, we will need an base type which can keep track of the names of our fields and the values each of each of those fields.</p>

<h3>Spring Cleaning</h3>

<p>Tutorials Parts 1 through 3 were all about building up the basic skills and, most importantly, understanding needed to work with Type Providers.  Learning how to generate a type, how to add methods, properties, constructors, etc.  Through practice and application, hopefully, you get comfortable with erased types and how generated types are built on top of an base type.</p>

<p>Looking back at the <code>Hello</code> generated type we built in this tutorial; we&rsquo;ve got something which is a bit slapdash.  That&rsquo;s fine for tinkering and learning the basics, but now that we have that under our belt it&rsquo;s time to build an actual (though still only practice) type provider.</p>

<p>All this adds up to: starting our code over.  Below is the fresh foundation from which we will build our Type Provider.  Note, that this does NOT include any constructor.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">TutorialTypeProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">TutorialTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'>    <span class="c1">// provided types below.</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="s2">&quot;Tutorial&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                        <span class="s2">&quot;TutorialType&quot;</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">TutorialType</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And add them to the namespace</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data Source and Schema</h3>

<p>The first thing we need is a data source and schema off of which we work.  Let&rsquo;s start with a simple data source: just a table with some number of columns.  To keep things simple, we will start with all the columns be integer values.  Our schema, then, would just be a list of the names of the columns.</p>

<p>For example, if we had a table with columns &ldquo;Tom&rdquo;, &ldquo;Dick&rdquo;, and &ldquo;Harry&rdquo;; then our schema would be <code>["Tom"; "Dick"; "Harry"]</code>. That would get passed to our type provider and a type with 3 integer fields named &ldquo;Tom&rdquo;, &ldquo;Dick&rdquo;, and &ldquo;Harry&rdquo; would be generated.</p>

<p>Our schema, then, will be a very simple list of column names.</p>

<h3>Base Type</h3>

<p>Now that we know how to define what the data source looks like, it&rsquo;s time to make a type which can represent datum which matches our schema.  In our case, this would need to be able to store an integer for each column.  We also know how the generated type will look: a field named for each column defined in our schema.  This means that our base type will be randomly accessed.  So, we should use an array to store the value of each column.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">type</span> <span class="nc">TutorialType</span> <span class="o">=</span> <span class="kt">int</span> <span class="kt">array</span>
</span></code></pre></td></tr></table></div></figure>


<p>I am using a type alias here, because in the future we will probably build this up in to a more complex type than just an integer array.</p>

<p>We must now configure our Type Provider to use our new base type rather than <code>obj</code>.  So we update the <code>ProvidedTypeDefinition</code> (in the function &lsquo;CreateType&rsquo;) and make the <code>baseType</code> be of type <code>TutorialType</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="nc">TutorialType</span><span class="o">&gt;)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Schema To Type</h3>

<p>Above in &ldquo;Data Source and Schema&rdquo;, the schema was defined as just a list of column names.  This schema will need to be passsed to <code>CreateType</code> so that it will have the data needed to generate our type.  So, update <code>CreateType</code> to take a list of strings:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>


<p>And also update the call to <code>CreateType</code> to pass in some simple test data:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">([</span><span class="s2">&quot;Tom&quot;</span><span class="o">;</span> <span class="s2">&quot;Dick&quot;</span><span class="o">;</span> <span class="s2">&quot;Harry&quot;</span><span class="o">])</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that <code>CreateType</code> has the schema for our data source, it&rsquo;s time to build up our type provider.</p>

<h4>Constructor I barely know her</h4>

<p>The first thing to add is the missing constructor.  This will be simple, based upon the number of column names passed to <code>CreateType</code> we want to create an array of integers, all initialized to 1.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="nn">Array</span><span class="p">.</span><span class="n">init</span> <span class="n">columns</span><span class="o">.</span><span class="nc">Length</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>        <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of TutorialType to 0.&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Properties &ndash; Insert Uncle Pennybags Joke</h4>

<p>The constructor will initialize the base data upon which our type is built.  Now we can add a field for each column, which will get and set the value of that field.  To do this, we will iterate the list of columns and create a property with the corresponding name.  The Getter and Setter functions will be defined as lambdas which store an index to the appropriate location in the array.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="n">columns</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">mapi</span> <span class="o">(</span> <span class="k">fun</span> <span class="n">i</span> <span class="n">col</span> <span class="o">-&gt;</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">col</span><span class="o">,</span>
</span><span class='line'>                                                <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                                                <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:</span> <span class="nc">TutorialType</span><span class="o">).[</span><span class="n">i</span><span class="o">]</span> <span class="o">@@&gt;),</span>
</span><span class='line'>                                                <span class="nc">SetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">]</span> <span class="o">:</span> <span class="nc">TutorialType</span><span class="o">).[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;-</span> <span class="o">(%%</span><span class="n">args</span><span class="o">.[</span><span class="mi">1</span><span class="o">]</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">@@&gt;)))</span>
</span><span class='line'>                <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note in both <code>GetterCode</code> and <code>SetterCode</code> the lambda functions have <code>%%args.[0] : TutorialType)</code> instead of <code>%%args.[0] : obj</code>.  This is because we defined our <code>baseType</code> to be <code>TutorialType</code>.</p>

<h3>Validation &ndash; A Short Tangent</h3>

<p>Something which is obviously missing is logic to make sure that a valid schema is passed in.  For example, what if a column name is &ldquo;2&rdquo;, our code would try to create a property named &ldquo;2&rdquo; which is illegal.  Other cases would be: an empty list of columns, an empty or null string for a column name, illegal characters, and duplicate names.</p>

<p>Now, if you&rsquo;re like me, the next question you have is: what the fuck happens when a Type Provider throws an exception?  To find out, let&rsquo;s add some simple validation to our TypeProvider and run a test where we fail the validation.</p>

<p>We&rsquo;ll add some code to check if the list of columns is empty.  In the below codeblock, I added a new function <code>ValidateColumnSchema</code> and called that function at the beginning of <code>CreateType</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">ValidateColumnSchema</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">columns</span><span class="o">.</span><span class="nc">Length</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span>
</span><span class='line'>            <span class="n">failwith</span> <span class="s2">&quot;The column list is empty&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="o">(</span><span class="n">columns</span><span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="nc">ValidateColumnSchema</span> <span class="n">columns</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, just for this test, update the call to create type to look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">(</span><span class="bp">[]</span><span class="o">)</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Build and send the project output to the FSI.  You should get an output that looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stdin(2,1): error FS3053: The type provider 'Samples.FSharp.TutorialTypeProvider.TutorialTypeProvider' reported an error: The type provider constructor has thrown an exception: The column list is empty</span></code></pre></td></tr></table></div></figure>


<p>Make sure to change the call to <code>CreateType</code> back to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="o">([</span><span class="s2">&quot;Tom&quot;</span><span class="o">;</span> <span class="s2">&quot;Dick&quot;</span><span class="o">;</span> <span class="s2">&quot;Harry&quot;</span><span class="o">])</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>In this tutorial, we examined the base type which our Type Provider uses as the base for generated types.  We updated the function which generates our type, so that it will take a list of field names and generate a type which has the corresponding fields.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 3 - Instantiables]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/05/type-providers-tutorial-part-3-instantiables/"/>
    <updated>2014-04-05T15:42:52-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/05/type-providers-tutorial-part-3-instantiables</id>
    <content type="html"><![CDATA[<p>In the last tutorial, we built a simple type named <code>Hello</code> which had some static members.  In this tutorial, we&rsquo;ll expand our <code>Hello</code> type to include a constructor, an instance property, and an instance method.  Adding these will allow us to create instances of <code>Hello</code> using the <code>new</code> operator:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Hello</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll also make <code>Hello</code> store some data, that means our type providers will be one step closer to awesome.  Also, one step closer to being an effective means of interacting with structured data sources.</p>

<p>The full code for what we make in this part will be at the end of this post.</p>

<!-- more -->


<h3>Quick Overview</h3>

<p>Here&rsquo;s the order of what we&rsquo;ll be doing in Part 3 of this tutorial series</p>

<ol>
<li>Add a constructor to <code>Hello</code> and make <code>Hello</code> store a single integer value.</li>
<li>Add a parameterized construtor to <code>Hello</code>.  This will let us set the value for <code>Hello</code>.</li>
<li>Add an instance property which returns the integer set by the constructor.</li>
<li>Add an instance method which doubles the integer set by the constructor.</li>
</ol>


<p>Along the way, we&rsquo;ll see the backing <code>obj</code> type for the first time.  This is where the idea of &ldquo;Erased Types&rdquo; I mentioned in Part 1 becomes important.  Remember, as far as the runtime is concerned, our generated types are just instances of <code>obj</code> (all the methods, properties, and names we generate with our Type Providers are illusions to help developers write better code).</p>

<h3>Constructors &ndash; Tonka Tough</h3>

<p>In order to make our type instantiable, we have to have a constructor.  It could be a default constructor or one with parameters, it doesn&rsquo;t matter, but at least one must exist.</p>

<p>The ProvidedTypes module includes a nice type specifically for handling constructors:  <code>ProvidedConstructor</code>.  Not a very surprising name, if you&rsquo;ve been paying attention :).</p>

<p>We&rsquo;re going to add a default constructor to <code>Hello</code> (meaning it takes no parameters) which sets the value of our <code>Hello</code> instance to 0.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>      <span class="c1">/// ....</span>
</span><span class='line'>      <span class="c1">/// Code from the previous tutorials, removed to save space</span>
</span><span class='line'>      <span class="c1">/// ....</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="mi">0</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>        <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of Hello to 0.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctor</span>
</span><span class='line'>        <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<p>There really is not much to talk about here, it&rsquo;s very simple.  Except, I want to call out the <code>InvokeCode</code>, because this is the first time we interact with the backing <code>obj</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="mi">0</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I mentioned before, our <code>Hello</code> type basically sits on top of an instance of a formless <code>obj</code> type.  <code>InvokeCode</code> defines a function which gets executed when the construtor for <code>Hello</code> is called.  The value returned by our function is assigned to our underlying <code>obj</code>.  In our case, our <code>InvokeCode</code> function just returns <code>0</code>, because this will get assigned to a <code>obj' type we cast it to</code>obj<code>using</code>0 :> obj`.</p>

<h3>Constructors with Parameters &ndash; Construx</h3>

<p>Now, being able to instantiate <code>Hello</code> is nice, but pretty pointless if we can&rsquo;t give it any values other than 0.  So here&rsquo;s how we create a constructor which takes a parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">ctorParams</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;v&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(</span> <span class="o">%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>        <span class="n">ctorParams</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This another constructor.  It sets the value of Hello to the parametr.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctorParams</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<ol>
<li><code>ProvidedParameter("v", typeof&lt;int&gt;)]</code> &ndash; This is how we define a parameter for a function or constructor.  The <code>"v"</code> is the name of the parameter.  Followed by the type of our parameter.</li>
<li><code>&lt;@@ ( %%(args.[0]) : int) :&gt; obj @@&gt;</code> &ndash; This extracts the value of our first parameter (which is <code>v</code> for those keeping score), casts it to an integer, and then boxes it to <code>obj</code>.  The <code>%%</code> is a Code Quotation operator used for &ldquo;splicing&rdquo;; this is used to &ldquo;splice&rdquo; the <code>args</code> value into a Code Quotation.</li>
</ol>


<h5>Testing</h5>

<p>Try loading our new type provider into F# interactive and executing <code>let x = new Tutorial.Hello(1)</code>!</p>

<h3>Instance Property &ndash; 9/10 of the Law</h3>

<p>Now we can instantiate our <code>Hello</code> type.  We have some data behind our type.  Let&rsquo;s add a way to get that data!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">instProperty</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Value&quot;</span><span class="o">,</span>
</span><span class='line'>                                            <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                                            <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">int</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instProperty</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<p>The instance <code>ProvidedProperty</code> is very similar to the one we used for making a static property:  we specify the name of the property and its type.  However, the <code>GetterCode</code> is important for us to review:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">int</span> <span class="o">@@&gt;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s important here is the <code>(%%(args.[0]) : obj)</code>.  More specifically, I want to call out the <code>args.[0]</code>:  when dealing with instance methods or properties <code>arg.[0]</code> is where the value of our instance is stored.  In the case of <code>Hello</code>, our instance is just an integer, so we case <code>arg.[0]</code> to an integer and return that value.</p>

<h5>Testing</h5>

<p>Try running this in the F# Interactive console:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Tutorial</span><span class="o">;;</span>
</span><span class='line'><span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">Tutorial</span><span class="p">.</span><span class="nc">Hello</span><span class="o">(</span><span class="mi">3</span><span class="o">);;</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="nc">Value</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Instance Methods &ndash; Elementary</h3>

<p>Finally, to wrap up this part of the tutorial.  We will add an instance method which, when invoked, will return twice the <code>Value</code> of our instance of <code>Hello</code>.</p>

<p>The code for this is eerily similar to most of the other code we&rsquo;ve written for properties, methods, and constructors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">instanceMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;DoubleValue&quot;</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                              <span class="o">&lt;@@</span> <span class="o">((%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">int</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instanceMeth</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Testing</h5>

<p>Try running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">Tutorial</span><span class="o">;;</span>
</span><span class='line'><span class="k">let</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">Tutorial</span><span class="p">.</span><span class="nc">Hello</span><span class="o">(</span><span class="mi">3</span><span class="o">);;</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="nc">DoubleValue</span><span class="bp">()</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>This is probably the most important part of the tutorial so far.  We have actually created a Type Provider which generates a type named <code>Hello</code> that can store some data (granted only a single integer :)).  We also made this an instantiable type.  The most important thing is that we got to see the underlying <code>obj</code> upon which our generated type is built.</p>

<p>This underlying type is critical and we will explore it further in a later section of this tutorial.</p>

<p>If anything is learned from Part 3, it&rsquo;s that our generated type is really just some frosting put on top of an existing type (in <code>Hello</code>&rsquo;s case an integer).  This may seem silly right now, but keep in mind, the real purpose of a type provider is to allow us to point to a source of data and get a bunch of types which will let us work with that data source in a very F# like manner.</p>

<h2>Full Code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">HelloWorldTypeProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">HelloWorldTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'>    <span class="c1">// provided types below.</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="s2">&quot;Tutorial&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                        <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">staticProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">propertyName</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>
</span><span class='line'>                                            <span class="n">propertyType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                                            <span class="nc">IsStatic</span><span class="o">=</span><span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                                            <span class="nc">GetterCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided static property.</span>
</span><span class='line'>        <span class="n">staticProp</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This is a static property&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the static property to the type.</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticProp</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add a static method</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">staticMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;StaticMethod&quot;</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">IsStaticMethod</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                              <span class="o">&lt;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticMeth</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">ctor</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="o">],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="mi">0</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>        <span class="n">ctor</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This is the default constructor.  It sets the value of Hello to 0.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctor</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">ctorParams</span> <span class="o">=</span> <span class="nc">ProvidedConstructor</span><span class="o">(</span><span class="n">parameters</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">ProvidedParameter</span><span class="o">(</span><span class="s2">&quot;v&quot;</span><span class="o">,</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;)],</span>
</span><span class='line'>                                       <span class="nc">InvokeCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(</span> <span class="o">%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="kt">int</span><span class="o">)</span> <span class="o">:&gt;</span> <span class="n">obj</span> <span class="o">@@&gt;))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add documentation to the provided constructor.</span>
</span><span class='line'>        <span class="n">ctorParams</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This another constructor.  It sets the value of Hello to the parametr.&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Add the provided constructor to the provided type.</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">ctorParams</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">instProperty</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="s2">&quot;Value&quot;</span><span class="o">,</span>
</span><span class='line'>                                            <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                                            <span class="nc">GetterCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="o">(%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">int</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instProperty</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">let</span> <span class="n">instanceMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;DoubleValue&quot;</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                              <span class="o">&lt;@@</span> <span class="o">((%%(</span><span class="n">args</span><span class="o">.[</span><span class="mi">0</span><span class="o">])</span> <span class="o">:</span> <span class="n">obj</span><span class="o">)</span> <span class="o">:?&gt;</span> <span class="kt">int</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">instanceMeth</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And add them to the namespace</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 2]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/04/type-providers-tutorial-part-2/"/>
    <updated>2014-04-04T19:51:36-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/04/type-providers-tutorial-part-2</id>
    <content type="html"><![CDATA[<p>In Part 1 of this series, I briefly explained what a Type Provider was and some of the main concepts which you would need to know.  In Part 2, I am going to build a very simple Type Provider.  The purpose of Part 2 is to cover the basics of developing Type Providers, how to test them with F# Interactive, and the support tools which make developing Type Providers easy.</p>

<p>I will make a Type Provider which generates a single type named &ldquo;Hello&rdquo;.  At first it will just have a static property which returns the string <code>"World"</code>.  Then I will add a static method which takes no parameters.  Finally, I will add a static method which takes a parameter.</p>

<!-- more -->


<p>I start by creating a new F# Library Project and name it &ldquo;TypeProviderTutorial&rdquo;:</p>

<p><img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/1-newproj.png"></p>

<p>I then download the <a href="http://fsharp3sample.codeplex.com/SourceControl/latest#SampleProviders/Shared/ProvidedTypes-0.4.fs">ProvidedTypes-0.4.fs file from the F# 3.0 Sample Pack</a> and add that to my project:</p>

<p><img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/2-providedtypes.png" width="300"></p>

<p>Now it&rsquo;s time to create our Type Provider.  Add a new F# source code file beneath the &ldquo;ProvidedTypes-0.4.fs&rdquo; and name it &ldquo;HelloWorld.fs&rdquo;.</p>

<p><img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/3-addbelow.png">
<img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/4-newsource.png"></p>

<h3>Skeleton Code</h3>

<p>We&rsquo;ll build up from the very bare minimum needed for a Type Provider.  Starting with the boilerplate code which actually tells the compiler our type is a Type Provider:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">HelloWorldTypeProvider</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Reflection</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Samples</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">ProvidedTypes</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nn">Core</span><span class="p">.</span><span class="nc">CompilerServices</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Microsoft</span><span class="p">.</span><span class="nn">FSharp</span><span class="p">.</span><span class="nc">Quotations</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// This defines the type provider. When compiled to a DLL it can be added as a reference to an F#</span>
</span><span class='line'><span class="c1">// command-line compilation, script or project.</span>
</span><span class='line'><span class="o">[&lt;</span><span class="nc">TypeProvider</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">type</span> <span class="nc">HelloWorldTypeProvider</span><span class="o">(</span><span class="n">config</span><span class="o">:</span> <span class="nc">TypeProviderConfig</span><span class="o">)</span> <span class="k">as</span> <span class="n">this</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Inheriting from this type provides implementations of ITypeProvider in terms of the</span>
</span><span class='line'>    <span class="c1">// provided types below.</span>
</span><span class='line'>    <span class="k">inherit</span> <span class="nc">TypeProviderForNamespaces</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">[&lt;</span><span class="n">assembly</span><span class="o">:</span><span class="nc">TypeProviderAssembly</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">do</span><span class="bp">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will compile, but won&rsquo;t do anything fun yet :).</p>

<h5>Breakdown</h5>

<ol>
<li><code>[&lt;TypeProvider&gt;]</code> this attribute tells the compiler that my type <code>HelloWorldTypeProvider</code> is a Type Provider.</li>
<li>Within <code>HelloWorldTypeProvider</code> we will put the code which actually generates new types.</li>
<li><code>[&lt;assembly:TypeProviderAssembly]&gt;</code> this attribute indicates that this assembly contains a Type Provider.</li>
</ol>


<h3>The <code>Hello</code> Type</h3>

<p>With the skeleton in place, it&rsquo;s time to start adding a little muscle.  The following code will create a type named <code>Hello</code>.  This type won&rsquo;t do anything because there are no members (static or instance).  The code tells the type what assembly it belongs to, what namespace it is in, and the name of the type.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>    <span class="k">let</span> <span class="n">namespaceName</span> <span class="o">=</span> <span class="s2">&quot;Tutorial&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">thisAssembly</span> <span class="o">=</span> <span class="nn">Assembly</span><span class="p">.</span><span class="nc">GetExecutingAssembly</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                        <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                        <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>        <span class="n">t</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">types</span> <span class="o">=</span> <span class="o">[</span> <span class="nc">CreateType</span><span class="bp">()</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// And add them to the namespace</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">this</span><span class="o">.</span><span class="nc">AddNamespace</span><span class="o">(</span><span class="n">namespaceName</span><span class="o">,</span> <span class="n">types</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<ol>
<li>I added the method <code>CreateType</code> which will return a new provided type when called.  Right now, all this method does is create the most boring type ever.</li>
<li><code>types</code> is a list of types which the Type Provider generates</li>
<li><code>do this.AddNamespace(namespaceName, types)</code> adds the generated types to the namespace <code>namespaceName</code> so that they can be used by a developer.</li>
</ol>


<h5>Testing</h5>

<p>Build the library.  When the build is complete, right click on the project in the Solution Explorer and choose &ldquo;Send Project Output To F# Interactive&rdquo;:</p>

<p><img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/5-firstbuild.png"></p>

<p>In F# Interactive run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> open Tutorial;;
</span><span class='line'>> Tutorial.Hello;;</span></code></pre></td></tr></table></div></figure>


<p>When you run <code>Tutorial.Hello</code> you&rsquo;ll get an error about not having a constructor.  This is a good thing.  The compiler can find the type, but there&rsquo;s no constructor so it bombs out.</p>

<p><strong> Before Proceeding make sure to reset F# Interactive </strong>
<img src="http://erichgess.github.io/images/posts/typeprov_tut_p2/6-resetfsi.png">
Do this by right clicking on the FSI window and choosing the reset option.</p>

<h3>Adding a Static Property</h3>

<p>Time to make that <code>Hello</code> type actually do something.  We&rsquo;ll add a static property to this type called <code>StaticProperty</code> which will return the string &ldquo;World!&rdquo;.  Once we&rsquo;ve added that, we&rsquo;ll be able to write <code>Tutorial.Hello.World</code> in our code and it will compile!</p>

<p>To add the static property, I&rsquo;m going to update the <code>CreateType()</code> method.  It will create a static property by using the <code>ProvidedProperty</code> type, then that value will be added as a member to the generated type.</p>

<p>Here&rsquo;s the code</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nc">CreateType</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">ProvidedTypeDefinition</span><span class="o">(</span><span class="n">thisAssembly</span><span class="o">,</span><span class="n">namespaceName</span><span class="o">,</span>
</span><span class='line'>                                    <span class="s2">&quot;Hello&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">baseType</span> <span class="o">=</span> <span class="nc">Some</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="n">obj</span><span class="o">&gt;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create a new static property</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">staticProp</span> <span class="o">=</span> <span class="nc">ProvidedProperty</span><span class="o">(</span><span class="n">propertyName</span> <span class="o">=</span> <span class="s2">&quot;StaticProperty&quot;</span><span class="o">,</span>     <span class="c1">// specify the name of the property</span>
</span><span class='line'>                                        <span class="n">propertyType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>     <span class="c1">// make it a string type</span>
</span><span class='line'>                                        <span class="nc">IsStatic</span><span class="o">=</span><span class="bp">true</span><span class="o">,</span>                     <span class="c1">// make it a static property</span>
</span><span class='line'>                                        <span class="nc">GetterCode</span><span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span> <span class="o">&lt;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&gt;))</span>  <span class="c1">// code quotation.  When someone gets this property </span>
</span><span class='line'>                                                                                     <span class="c1">// this function will be executed and &quot;World!&quot; will be returned</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add documentation to the provided static property.</span>
</span><span class='line'>    <span class="n">staticProp</span><span class="o">.</span><span class="nc">AddXmlDocDelayed</span><span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="s2">&quot;This is a static property&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add the static property to the type.</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticProp</span>
</span><span class='line'>    <span class="n">t</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<ol>
<li>The function <code>ProvidedProperty</code> is the most important piece in this step.  It creates a Property member which can then be added to our generated type.</li>
<li><code>t.AddMember staticProp</code> we add the Static Property we created to our type <code>Hello</code>.</li>
<li><code>staticProp.AddXmlDocDelayed</code> just adds Intellisense documentation for this property.  You&rsquo;ll see this text if you over your mouse over <code>Tutorial.Hello.StaticProperty</code>.</li>
</ol>


<h5>Testing</h5>

<p>Build and send our Library to F# Interactive then open the &ldquo;Tutorial&rdquo; namespace.  Try executing <code>Tutorial.Hello.StaticProperty</code> and see what you get.  It should be <code>val it : string = "World!"</code>.  Which is awesome!  We now have a generated type which actually does something!</p>

<h3>Adding a Static Method</h3>

<p>Finally, we&rsquo;ll add a static method to our <code>Hello</code> type.  To keep things consistent, this method will also return &ldquo;World!&rdquo;.</p>

<p>Again, the work will be done by updating <code>CreateType()</code>.  In this case, we&rsquo;ll add a ProvidedMethod to our <code>Hello</code> type.  In the code sample below, I left out the StaticProperty to keep the code snippet small:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>        <span class="k">let</span> <span class="n">staticMeth</span> <span class="o">=</span>
</span><span class='line'>            <span class="nc">ProvidedMethod</span><span class="o">(</span><span class="n">methodName</span> <span class="o">=</span> <span class="s2">&quot;StaticMethod&quot;</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">parameters</span> <span class="o">=</span> <span class="bp">[]</span><span class="o">,</span>
</span><span class='line'>                           <span class="n">returnType</span> <span class="o">=</span> <span class="n">typeof</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;,</span>
</span><span class='line'>                           <span class="nc">IsStaticMethod</span> <span class="o">=</span> <span class="bp">true</span><span class="o">,</span>
</span><span class='line'>                           <span class="nc">InvokeCode</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="n">args</span> <span class="o">-&gt;</span>
</span><span class='line'>                              <span class="o">&lt;@@</span> <span class="s2">&quot;World!&quot;</span> <span class="o">@@&gt;))</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="nc">AddMember</span> <span class="n">staticMeth</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Breakdown</h5>

<p>There isn&rsquo;t much which is different between adding a static method and a static property.  We use a different type: <code>ProvidedMethod</code>.  Also note that to make this static we set the <code>IsStaticMethod</code> property to <code>true</code> rather than the <code>IsStatic</code> property.  <code>InvokeCode</code> is the function which will be executed when this method is called.  In our case, it will just return &ldquo;World!&rdquo;.</p>

<h5>Testing</h5>

<p>Try executing <code>Tutorial.Hello.StaticMethod();;</code> and see what you get :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Providers - Tutorial Part 1 - Concepts]]></title>
    <link href="http://erichgess.github.io/blog/2014/04/03/type-providers-tutorial-part-1/"/>
    <updated>2014-04-03T22:36:12-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/04/03/type-providers-tutorial-part-1</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve only been working with the F# language for the last year.  Which means that all of my learning has been with version 3.x of the F# language.  One of the biggest features of 3.x, and something which I have yet to work with, is the Type Provider.  Type Providers dynamically generate new types, usually from some data source (e.g. databases, XML documents, web services), which a developer can use in their code.  For C# developers this is analogous to the Entity Framework or the &ldquo;Add Service Reference&rdquo; in VS, both of which take a database or WSDL, respectively, and generate classes and functions that can be used in code.  For Java this would be similar to Hibernate or wsdl2java.  Just to be clear, when you create a Type Provider, what you&rsquo;ve built is an Entity Framework or a wsdl2java.  What F# provides is a framework for building your own Type Providers as easily as possible.</p>

<!-- more -->


<p>In order to learn how to build Type Providers, I decided to try my hand at writing a tutorial.  This will, I think, be the first tutorial I&rsquo;ve ever written.  I&rsquo;m going to break this tutorial into several phases.  The first phase will be building a very simple &ldquo;Hello World&rdquo; type provider, which just creates a type which can be referenced in code (it won&rsquo;t do anything).  The next phase will be to add static and instance methods, fields, and properties, but, again, the type will be predefined.  Finally, I want to do a true type provider for a data source (I&rsquo;m thinking Cassandra) which will take the schema for a database and generate a set of types from that schema.</p>

<h3>Important Things</h3>

<h4>ProvidedTypes.fs</h4>

<p>This is an F# source code file provided by the F# team.  It includes a bunch of things for simplifying the construction of Type Providers.  I&rsquo;ll be making heavy use of this in my tutorial.  If you plan on writing your own Type Provider, you definitely want to get this:  it can be found in the F# 3.0 sample pack (<a href="http://fsharp3sample.codeplex.com/">http://fsharp3sample.codeplex.com/</a>).</p>

<h4>Erased Types</h4>

<p>Most of the time, when building Type Providers, you&rsquo;ll be creating erased types:  although this type may have members and functions when compiled it will be convered into an Object type by the compiler.  With the type provider, you are creating a set of methods, fields, properties, and constructors which enable a developer to work with your type, but, when compiled, all of that is &ldquo;erased&rdquo; and it just becomes and Object.  There&rsquo;s a section in the Type Provider MSDN article which explains erased types (<a href="http://msdn.microsoft.com/en-us/library/hh361034.aspx#BK_Erased">http://msdn.microsoft.com/en-us/library/hh361034.aspx#BK_Erased</a>).</p>

<p>What&rsquo;s important is that this means there will be a lot of casting to and from the <code>obj</code> type in Type Provider code.  This also means that if the Type Provider is going to work with any kind of meaningful data sources, an underlying type (on which the generated types are built) must be defined.  If you look at the MSDN Type Provider Tutorial (<a href="http://msdn.microsoft.com/en-us/library/hh361034.aspx">http://msdn.microsoft.com/en-us/library/hh361034.aspx</a>), the underlying type is <code>string</code>.</p>

<h4>Developing Type Providers</h4>

<p>A Type Provider cannot be defined in anything except a Library project.  This seems like a pain but it does make sense:  if you are going to use a Type Provider in your code it must be fully compiled before you use it.</p>

<h4>Debugging Type Providers</h4>

<p>This is probably the biggest pain point of developing Type Providers, in my humble opinion.  Do not create a console project in your Type Provider solution and try to use that console project to test your Type Providers.  The problem is that when you build the console project, VS will lock the DLLs from the Type Provider library project.  Once the DLLs are locked you won&rsquo;t be able to build the Type Provider library until you restart VS.</p>

<p>Use the F# Interactive Console.  Build the library project then right click on it in the Solution Explorer and choose &ldquo;Send to F# Interactive&rdquo;.  In the interactive console you can test out your type provider.  IMPORTANT:  Before you try building your project again make sure to reset the interactive console, otherwise it will lock the DLLs and your build will fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Haskell Meetup]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/20/first-haskell-meetup/"/>
    <updated>2014-03-20T10:47:44-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/20/first-haskell-meetup</id>
    <content type="html"><![CDATA[<p>Last night was the first meet up for the San Diego Haskell Users Group.  I have to say that it was a lot of fun and probably the most interesting dev meet up I&rsquo;ve been to so far in San Diego.  I have barely done any Haskell, beyond get the compiler setup on my computer and make &ldquo;Hello, World&rdquo;.  As such, I learned a lot.</p>

<ol>
<li>I reallly love how Haskell allows you to build &ldquo;pipelines of data&rdquo;:  when you chain together several functions, put data into the top function and get the output of the bottom.  This is one of my favorite things to get in F# code and Haskell just seems to make it even easier.</li>
<li>Generic Algebraic Data Types:  something which was mentioned to me when I made a comment about doing a presentation on &ldquo;Algebraic Data Types&rdquo;.  I have no clue what the difference between ADT and GADT is but now I have to find out.</li>
<li>Cabal might be the simplest project management/build management tool I&rsquo;ve yet seen.  Though I&rsquo;ve only looked a little at Leiningen, I think, Cabal fills the same role.  However, I found it much easier to read.</li>
<li>Having a meetup be a 15 minute walk from my apartment is the best.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RavenDB, MapReduce, and Logging]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/11/ravendb/"/>
    <updated>2014-03-11T10:38:11-05:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/11/ravendb</id>
    <content type="html"><![CDATA[<p>Working with a system which is distributed and uses messaging for communication presents some interesting challenges.  One frequent challenge I&rsquo;ve gotten to deal with a few times is:  how to tell what&rsquo;s happening to a request as the system is processing it.  A request comes into the my system, which wakes one service up and it does some work, then it sends off commands to two other services which both do some work, and then, when both are done, a final service does some work and completes the task.  A little vague, but the scenario should illustrate that when trying to figure out what happened to the initial request, I&rsquo;ve got to dig through at least 4 services worth of logs.  That&rsquo;s assuming everything has only one instance; multiple instances on multiple servers and it becomes a huge chore.</p>

<p>The solution to this is fairly simple:  use a log aggregator like splunk or roll your own with ElasticSearch.  However, I want to have some fun and learn something new and this is a perfect situation for learning and experimentation:  the problem isn&rsquo;t that complex and if I get the solution wrong, no one really cares, so the risk is low.  What I decided to do was build something up using RavenDB and its built in MapReduce index system.</p>

<!-- more -->


<p>Here&rsquo;s a cleaned up reiteration of the problem:  I have a system consisting of a bunch of services, communicating via message queues.  Completing a request will involve several different services.  To know the status of a request, or to investigate an issue with a request, will require finding out log data for all the services in the system.  A Huge Pain.</p>

<p>Let me build up an example to explain.  My system, for the fictional company Bloxam, handles processing orders and tracking their shipment.  There&rsquo;s a service which will receive the order from the customer, process it, and either accept or error on the order (maybe the Credit Cart didn&rsquo;t work) then a service which will handle tracking the shipping side.  The different statuses an order can go through are:</p>

<ol>
<li>&ldquo;Order Received&rdquo;</li>
<li>&ldquo;Processing Order&rdquo;</li>
<li>&ldquo;Order Accepted&rdquo;</li>
<li>&ldquo;Order Shipped&rdquo;</li>
<li>&ldquo;Order Delivered&rdquo;
1  &ldquo;Error <text description>&rdquo;</li>
</ol>


<p>For the duration of this post, I&rsquo;ll call these Facts about the order.</p>

<p>I want to know what the current status of any given order is at any time.  I also want to be able to display various things:  for the customer: the statuses of all their orders.  For Operations:  all orders which have thrown an error.  There will be a lot of data written when these little status updates.</p>

<p>There are a lot of ways to solve this problem, but I&rsquo;m using this to learn more about big data, so I&rsquo;m going to go down that path.  I&rsquo;m also using this to learn more about RavenDB.</p>

<p>Here&rsquo;s how I&rsquo;m going to implement my little big data solution:</p>

<ol>
<li>Each fact will be written to the database</li>
<li>All facts are immutable</li>
<li>MapReduce task will aggregate the facts and reduce them down to views which my customers need (actual customers and operations, in this case).</li>
</ol>


<p>The first item is pretty obvious, without saving the facts how will I know what&rsquo;s happening.</p>

<p>The second is less obvious:  why not just keep a single record for each order and update the status with the latest fact?  There are a couple reasons for this.  Updates are slow:  the code has to look the record up, then update it, and then save it.  Updates are risky:  what happens if someone is reading that record while I&rsquo;m updating it, two or more updates are happening to the same record, or what if an update contains a bad message (in the latest release, someone changed the text of a status message by accident)?  This is why big data sits on top of immutable data.</p>

<p>The MapReduce step.  RavenDB has a nice MapReduce index feature which will work very well here.  I can tell RavenDB to basically perform a calculation on the entire set of Facts I have stored.  In this casee, what I am going to do is tell RavenDB to divide all the Facts into buckets based on Order Id.  The for each bucket, pick the most recent Fact.  This will generate a table, where each order appears once and has its most recent Fact.  RavenDB will run this task in the back ground and everytime I add a new fact it will update the information.</p>

<p>Here&rsquo;s my order fact type:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">OrderFact</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Guid</span> <span class="n">OrderId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">TimeStamp</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Fact</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Id is a unique identifier which RavenDB will use as the primary key for the OrderFacts table.  The OrderId is a GUID which will identify an order a customer has generated, this will be used to correlate facts to an order.  The timestamp says when the fact was generated.  The name is for who made the order.  The Fact is the string which contains the fact.  The fact is a string so that it is as flexible as possible both at the stage where I create the fact and further down the line when the facts are being analyzed.</p>

<p>I&rsquo;ll add a second post where I explain how I setup the MapReduced on RavenDB.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ and F# - Part 6]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/09/rabbitmq-and-f-number-part-6/"/>
    <updated>2014-03-09T00:08:19-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/09/rabbitmq-and-f-number-part-6</id>
    <content type="html"><![CDATA[<p>A final round of polish.  Now that I have the layout and flow for using my RabbitMQ library defined, it&rsquo;s time to go through and do a bit of clean up on my names.  There&rsquo;s a lot I can do to make it so that code you write with this library becomes as readable and literate as possible.</p>

<p>Here&rsquo;s the code you write to do the initial setup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">openConnection</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">myChannel</span> <span class="o">=</span> <span class="n">openChannel</span> <span class="n">connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I just look at this, I have to ask:  open connection to what?  Context would probably help, but this function will get called only once in an entire application, so there&rsquo;s not much reason to hold back on the name.  I like the fluent style of naming, so I&rsquo;ll go with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectToRabbitMqServerAt</span> <span class="s2">&quot;localhost&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll also make the second line a little more fluent:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">myChannel</span> <span class="o">=</span> <span class="n">openChannelOn</span> <span class="n">connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which turns my setup code to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectToRabbitMqServerAt</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">myChannel</span> <span class="o">=</span> <span class="n">openChannelOn</span> <span class="n">connection</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it for now!  I have a library which will let me write code to connect to and send a message on RabbitMQ in about 4 lines of code.  Pretty damn good, IMO.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">connectToRabbitMqServerAt</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">openChannelOn</span> <span class="n">connection</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">writeToHelloQueue</span> <span class="o">=</span> <span class="n">createQueueWriter</span> <span class="n">channel</span> <span class="s2">&quot;MyQueue&quot;</span>
</span><span class='line'><span class="s2">&quot;Hello&quot;</span> <span class="o">|&gt;</span> <span class="n">writeToHelloQueue</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ and F# - Part 5]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/09/rabbitmq-and-f-number-part-5/"/>
    <updated>2014-03-09T00:00:00-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/09/rabbitmq-and-f-number-part-5</id>
    <content type="html"><![CDATA[<p>Alright, I now have a simple usable RabbitMQ client library which fits comfortably with F#.  However, there&rsquo;s still some inconsistency in the design which I want to polish out:</p>

<ol>
<li>To create a consumer on a  queue, you call:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">createQueueConsumer</span> <span class="n">myChannel</span> <span class="s2">&quot;myQueue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>To create a read function for a queue, you call:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(</span><span class="n">readFrom</span><span class="o">,_)</span> <span class="o">=</span> <span class="n">createQueueFuntions</span> <span class="n">myChannel</span>
</span><span class='line'><span class="k">let</span> <span class="n">readFromMyQueue</span> <span class="o">=</span> <span class="n">readFrom</span> <span class="s2">&quot;myQueue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>To create a write function for a queue, you call:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="o">(_,</span><span class="n">writeTo</span><span class="o">)</span> <span class="o">=</span> <span class="n">createQueueFuntions</span> <span class="n">myChannel</span>
</span><span class='line'><span class="k">let</span> <span class="n">writeToMyQueue</span> <span class="o">=</span> <span class="n">writeTo</span> <span class="s2">&quot;myQueue&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why have a function which manages both the read AND the writes for a channel?  Why not split the read and write out to their own functions?  This is better in my opinion for one very obvious reason:  the code will explicitly explain what is happening.  With my current createQueueFuntions  function, there is nothing which tells you that you get a tuple and that the first element in the tuple is a write function and the second element is a read function.</p>

<!-- more -->


<p>Let&rsquo;s make things more explicit and thus more readable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createQueueReader</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">readFromQueue</span> <span class="n">channel</span> <span class="n">queue</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">createQueueWriter</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queue</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will change the Sender application to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">EntryPoint</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">main</span> <span class="n">argv</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">openConnection</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">openChannel</span> <span class="n">connection</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">writeToHelloQueue</span> <span class="o">=</span> <span class="n">createQueueWriter</span> <span class="n">channel</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="k">mutable</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">&lt;-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="n">sprintf</span> <span class="s2">&quot;%d,test&quot;</span> <span class="o">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span><span class="o">)</span>  <span class="c1">// send a message with a number from 0 to 9 along with some text</span>
</span><span class='line'>        <span class="n">printfn</span> <span class="s2">&quot;Sending: %s&quot;</span> <span class="n">message</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">|&gt;</span> <span class="n">writeToHelloQueue</span>
</span><span class='line'>        <span class="nn">System</span><span class="p">.</span><span class="nn">Threading</span><span class="p">.</span><span class="nn">Thread</span><span class="p">.</span><span class="nc">Sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span> <span class="c1">// return an integer exit code</span>
</span></code></pre></td></tr></table></div></figure>


<p>BAM!  Now only what you need to survive is in the actual written code!</p>

<p>=====================================</p>

<p>There is a final bit of polish I want to hit for this version of my library.  This is my publish function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">publishToQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>    <span class="n">channel</span><span class="o">.</span><span class="nc">BasicPublish</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="k">null</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is the call to declareQueue.  This won&rsquo;t harm anything, what it does is create the queue if it does not already exist.  However, it will perform this action every single time you write a message to a queue.  That&rsquo;s definitely not needed.  I&rsquo;ll move this code over to where I create the writer function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createQueueWriter</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>    <span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queue</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, declareQueue will only be called when you create a reader or a writer for a queue.</p>

<p>The complete source code to date:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">FSharp</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nn">Client</span><span class="p">.</span><span class="nc">Events</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nc">Client</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">type</span> <span class="nc">Queue</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Name</span><span class="o">:</span> <span class="kt">string</span><span class="o">;</span> <span class="nc">Read</span><span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="kt">string</span> <span class="n">option</span><span class="o">;</span> <span class="nc">Publish</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">openConnection</span> <span class="n">address</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>        <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// I need to declare the type for connection because F# can&#39;t infer types on classes</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">openChannel</span> <span class="o">(</span><span class="n">connection</span><span class="o">:</span><span class="nc">IConnection</span><span class="o">)</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">declareQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="n">queueName</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">publishToQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicPublish</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="k">null</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueReader</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queue</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueWriter</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queue</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>        <span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queue</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueConsumer</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>            <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ and F# - Part 4]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-4/"/>
    <updated>2014-03-08T23:55:44-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-4</id>
    <content type="html"><![CDATA[<p>In my previous post, I made my RabbitMQ client library a bit more functional by removing the Queue record type and replacing it with higher order functions.  These higher order functions are used for creating functions for reading/writing queues.  If you want to use &ldquo;MyQueue&rdquo; for writing, you use the &ldquo;writeTo&rdquo; higher order function to create a function for writing to &ldquo;MyQueue&rdquo;.  It&rsquo;s sounds more complex than it really is.</p>

<p>I did that because I mentioned two things about my initial effort which bothered me:  it wasn&rsquo;t functional enough and it didn&rsquo;t support RabbitMQ consumers.  I got the first taken care of.  Now I am going to get the second.</p>

<p>I will follow the same higher order function approach:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createQueueConsumer</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'>    <span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>        <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will take a channel and a queue name, then return a function which will return one message from the consumer queue.</p>

<p>The complete source code up until now:</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">FSharp</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nn">Client</span><span class="p">.</span><span class="nc">Events</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nc">Client</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">type</span> <span class="nc">Queue</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Name</span><span class="o">:</span> <span class="kt">string</span><span class="o">;</span> <span class="nc">Read</span><span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="kt">string</span> <span class="n">option</span><span class="o">;</span> <span class="nc">Publish</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">openConnection</span> <span class="n">address</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>        <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// I need to declare the type for connection because F# can&#39;t infer types on classes</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">openChannel</span> <span class="o">(</span><span class="n">connection</span><span class="o">:</span><span class="nc">IConnection</span><span class="o">)</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">declareQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="n">queueName</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">readFromQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">publishToQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicPublish</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="k">null</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueFuntions</span> <span class="n">channel</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="n">readFromQueue</span> <span class="n">channel</span><span class="o">,</span> <span class="n">publishToQueue</span> <span class="n">channel</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueConsumer</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>            <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ and F# - Part 3]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-3/"/>
    <updated>2014-03-08T23:38:01-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-3</id>
    <content type="html"><![CDATA[<p>I now have a functioning RabbitMQ Library!  Though, there is a lot more to be done to make it satisfactory.</p>

<p>There are two problems:</p>

<ol>
<li>Missing the Queue Consumer functionality.  This makes it a lot easier to deal with RabbitMQ so I definitely want to get this in.</li>
<li>I&rsquo;m not happy with using the record type to capture the Read and Publish functions for a queue.   After all, how often are you going to be writing to and reading from a specific queue in the same process?</li>
</ol>


<!-- more -->


<p>I will start by fixing #2, as that is bothering me the most.  The design, at present, has this flow:</p>

<ol>
<li>Connect to a RabbitMQ server</li>
<li>Open a channel</li>
<li>Request a connection to a queue</li>
<li>Receive a function for writing to the queue and a function for reading from the queue</li>
</ol>


<p>The first question I have is:  how often are you going to be reading from and writing to the same queue in the same code?  Probably not very often.  Which means that, most of the time, only half of what I am returning is useful.   We can simplify this.  Rather than build the Read and Write functions for you, they should be built only when you need them.</p>

<p>I will change the design so that rather than opening a queue and getting back two functions.  There will be two functions which can write or read to any queue.</p>

<p>My next design approach will be to update the function which creates a channel to now also return two functions:  one function will be for using the channel to write to a queue, the function is for using the channel to read from a queue.  Now if you want to setup a publishing function to &ldquo;MyQueue&rdquo; you use the returned write function and partial application to build the writeToMyQueue function.</p>

<p>I&rsquo;ve modified my readFromQueue function so that it now takes a channel and a queue name and returns a function which will read one message from the queue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">readFromQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>            <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I made this new function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">createQueueFuntions</span> <span class="n">channel</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">readFromQueue</span> <span class="n">channel</span><span class="o">,</span> <span class="n">publishToQueue</span> <span class="n">channel</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which will take a channel and return two functions.  One for writing to a specific queue and one for reading from a specific queue.  You can then use these two functions to connect to queues as you need.  Once a developer reaches this point, all he or she needs to think about are: queue names, do I want to read from this queue, and do I want to write to this queue.</p>

<p>For example, in my receiver the code is now:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">EntryPoint</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">main</span> <span class="n">argv</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">openConnection</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">myChannel</span> <span class="o">=</span> <span class="n">openChannel</span> <span class="n">connection</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(</span><span class="n">readFrom</span><span class="o">,_)</span> <span class="o">=</span> <span class="n">createQueueFuntions</span> <span class="n">myChannel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">readFromHelloQueue</span> <span class="o">=</span> <span class="n">readFrom</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="n">readFromHelloQueue</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">match</span> <span class="n">message</span> <span class="k">with</span>
</span><span class='line'>        <span class="o">|</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="n">s</span>
</span><span class='line'>        <span class="o">|</span> <span class="o">_</span> <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span> <span class="c1">// return an integer exit code</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t care about writing to queues at all, so I completely ignore the write function which createQueueFunctions returns.</p>

<p>The Sender code now looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">[&lt;</span><span class="nc">EntryPoint</span><span class="o">&gt;]</span>
</span><span class='line'><span class="k">let</span> <span class="n">main</span> <span class="n">argv</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">openConnection</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">openChannel</span> <span class="n">connection</span>
</span><span class='line'>    <span class="k">let</span> <span class="o">(_,</span><span class="n">writeTo</span><span class="o">)</span> <span class="o">=</span> <span class="n">createQueueFuntions</span> <span class="n">channel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">writeToHelloQueue</span> <span class="o">=</span> <span class="n">writeTo</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="k">mutable</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">&lt;-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="n">sprintf</span> <span class="s2">&quot;%d,test&quot;</span> <span class="o">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span><span class="o">)</span>  <span class="c1">// send a message with a number from 0 to 9 along with some text</span>
</span><span class='line'>        <span class="n">printfn</span> <span class="s2">&quot;Sending: %s&quot;</span> <span class="n">message</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">|&gt;</span> <span class="n">writeToHelloQueue</span>
</span><span class='line'>        <span class="nn">System</span><span class="p">.</span><span class="nn">Threading</span><span class="p">.</span><span class="nn">Thread</span><span class="p">.</span><span class="nc">Sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="mi">0</span> <span class="c1">// return an integer exit code</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find that this design is a lot better.  Functions for reading and writing are only created when you need to read or write to a queue.  The channel object can now safely be ignored after the initial setup, instead everything boils down to: what do I want to do with this queue.  When you write with this framework, you now are no longer concerned with what objects you have at hand and what you can do with those objects; you are just concerned with what you want to do.</p>

<p>The complete source as of this point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">FSharp</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nn">Client</span><span class="p">.</span><span class="nc">Events</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nc">Client</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">type</span> <span class="nc">Queue</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Name</span><span class="o">:</span> <span class="kt">string</span><span class="o">;</span> <span class="nc">Read</span><span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="kt">string</span> <span class="n">option</span><span class="o">;</span> <span class="nc">Publish</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">openConnection</span> <span class="n">address</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>        <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// I need to declare the type for connection because F# can&#39;t infer types on classes</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">openChannel</span> <span class="o">(</span><span class="n">connection</span><span class="o">:</span><span class="nc">IConnection</span><span class="o">)</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">declareQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="n">queueName</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">readFromQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="nc">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">publishToQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicPublish</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="k">null</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">createQueueFuntions</span> <span class="n">channel</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">(</span><span class="n">readFromQueue</span> <span class="n">channel</span><span class="o">,</span> <span class="n">publishToQueue</span> <span class="n">channel</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">connectToQueue</span> <span class="n">connection</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">{</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">queueName</span><span class="o">;</span>
</span><span class='line'>        <span class="nc">Read</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                            <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="nc">None</span><span class="o">);</span>
</span><span class='line'>        <span class="nc">Publish</span> <span class="o">=</span> <span class="o">(</span><span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queueName</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RabbitMQ and F# - Part 2]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-2/"/>
    <updated>2014-03-08T23:15:36-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/08/rabbitmq-and-f-number-part-2</id>
    <content type="html"><![CDATA[<p>Notes about RabbitMQ:</p>

<pre><code>- You should have one connection per application and one channel per thread (http://stackoverflow.com/a/10501593)
</code></pre>

<p>I was able to build and run my sender and receiver, both using my client.</p>

<p>However, something odd happened.  The receiver was only printing out every other message which the Sender sent.</p>

<!-- more -->


<p><img src="http://erichgess.github.io/images/posts/rabbitmq_and_fsharp/missing_messages.png"></p>

<p>Here&rsquo;s the secret of what&rsquo;s happening:</p>

<p><img src="http://erichgess.github.io/images/posts/rabbitmq_and_fsharp/too_many_consumers.png"></p>

<p>OH SNAP!  There are two consumers on the queue and RabbitMQ is splitting the messages evenly between the two consumers.</p>

<p>My suspicion is that the Sender is also opening up a consumer.  I can verify this easily by starting only the Sender and looking at the RaabbitMQ console:</p>

<p><img src="http://erichgess.github.io/images/posts/rabbitmq_and_fsharp/too_many_consumers_2.png"></p>

<p>Sure enough, there&rsquo;s one consumer!  So the Sender is also opening up a consumer and reading messages from the queue.</p>

<p>The culprit is almost certainly this bit of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">queueName</span><span class="o">;</span>
</span><span class='line'><span class="nc">Read</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">readFromQueue</span> <span class="n">consumer</span> <span class="n">queueName</span><span class="o">);</span>
</span><span class='line'><span class="nc">Publish</span> <span class="o">=</span> <span class="o">(</span><span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queueName</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I create a consumer and attach it to the queue every time a request is made to open a queue.  My assumption had been that a message would only be read from the queue when <code>consumer.Queue.Dequeue()</code> was called.  This is a fairly obvious error, in hindsight.  Reading the documentation further, I see that the consumer sets up a subscription to a queue and messages are automatically read; making this a push pattern.  To do a pull pattern, I would just use BasicGet on the queue.</p>

<p>A basic get example, in C#:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">BasicGetResult</span> <span class="n">result</span> <span class="p">=</span> <span class="n">channel</span><span class="p">.</span><span class="n">BasicGet</span><span class="p">(</span><span class="n">queueName</span><span class="p">,</span> <span class="n">noAck</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I do want to have subscriptions and for this to be useful in my future projects.  However, for now my goal is to get a simple functioning library.  So I will switch my code over to use the basic get.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">connectToQueue</span> <span class="n">connection</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">{</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">queueName</span><span class="o">;</span>
</span><span class='line'>    <span class="nc">Read</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">message</span>
</span><span class='line'>                    <span class="k">else</span>
</span><span class='line'>                        <span class="s2">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="nc">Publish</span> <span class="o">=</span> <span class="o">(</span><span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queueName</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Read function now does a BasicGet and decodes the message.</p>

<p>The result:</p>

<p><img src="http://erichgess.github.io/images/posts/rabbitmq_and_fsharp/right_number_consumers.png"></p>

<p>No more extra consumer!</p>

<p>I really don’t like the part where I return &ldquo;&rdquo; if there is nothing in the queue.  There&rsquo;s already a great way of handling that in F#.  So I&rsquo;ll change the Read function to return a string option, which will change my code to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nc">Read</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>                <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                    <span class="nc">Some</span> <span class="n">message</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="nc">None</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is good, because it will force developers using this function to deal with both the case where a message is on the queue and the case where there is no message on the queue.</p>

<p>Here&rsquo;s the current complete code for my simple F# library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">namespace</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">FSharp</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nc">Client</span>
</span><span class='line'><span class="k">open</span> <span class="nn">RabbitMQ</span><span class="p">.</span><span class="nn">Client</span><span class="p">.</span><span class="nc">Events</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">Text</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nc">Client</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">type</span> <span class="nc">Queue</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">Name</span><span class="o">:</span> <span class="kt">string</span><span class="o">;</span> <span class="nc">Read</span><span class="o">:</span> <span class="kt">unit</span> <span class="o">-&gt;</span> <span class="kt">string</span><span class="o">;</span> <span class="nc">Publish</span><span class="o">:</span> <span class="kt">string</span> <span class="o">-&gt;</span> <span class="kt">unit</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">openConnection</span> <span class="n">address</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="n">address</span><span class="o">)</span>
</span><span class='line'>        <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// I need to declare the type for connection because F# can&#39;t infer types on classes</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">openChannel</span> <span class="o">(</span><span class="n">connection</span><span class="o">:</span><span class="nc">IConnection</span><span class="o">)</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">declareQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="n">queueName</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">readFromQueue</span> <span class="o">(</span><span class="n">consumer</span><span class="o">:</span><span class="nc">QueueingBasicConsumer</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>        <span class="n">message</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">publishToQueue</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">(</span><span class="n">message</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetBytes</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>        <span class="n">channel</span><span class="o">.</span><span class="nc">BasicPublish</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">queueName</span><span class="o">,</span> <span class="k">null</span><span class="o">,</span> <span class="n">body</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// I don&#39;t have to declare the type of connection, because F# can infer the type from my call to openChannel</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">connectToQueue</span> <span class="n">connection</span> <span class="o">(</span><span class="n">channel</span><span class="o">:</span><span class="nc">IModel</span><span class="o">)</span> <span class="n">queueName</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">declareQueue</span> <span class="n">channel</span> <span class="n">queueName</span> <span class="o">|&gt;</span> <span class="n">ignore</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">{</span><span class="nc">Name</span> <span class="o">=</span> <span class="n">queueName</span><span class="o">;</span>
</span><span class='line'>        <span class="nc">Read</span> <span class="o">=</span> <span class="o">(</span><span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="nc">BasicGet</span><span class="o">(</span><span class="n">queueName</span><span class="o">,</span> <span class="bp">true</span><span class="o">)</span>
</span><span class='line'>                        <span class="k">if</span> <span class="n">ea</span> <span class="o">&lt;&gt;</span> <span class="k">null</span> <span class="k">then</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                            <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                            <span class="n">message</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="s2">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="nc">Publish</span> <span class="o">=</span> <span class="o">(</span><span class="n">publishToQueue</span> <span class="n">channel</span> <span class="n">queueName</span><span class="o">)}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Odin Prototype]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/08/odin-prototype/"/>
    <updated>2014-03-08T01:32:30-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/08/odin-prototype</id>
    <content type="html"><![CDATA[<p>In my previous post, I described a distributed monitoring system called Odin.  Which I am building because it will help me learn and explore topics in distributed computing independent of work.</p>

<p>I&rsquo;ve been slowly working on it when I get a chance and have put together a very basic prototype:
<a href="https://github.com/erichgess/OdinPrototype">https://github.com/erichgess/OdinPrototype</a></p>

<p>This prototype is some hacking I did over a few, very spread out days, to try out some concepts.  It has a very simple agent, which reads %CPU used and sends a message to a receiver.  That receiver this publishes that message as an IObservable.  Multiple mailbox processors subscribe to the Observable and use Reactive to do some queries on the incoming messages.</p>

<p>This is very very little.  However, it served as a way for me to try out a few different concepts: RabbitMQ, Mailbox Processors, and Reactive.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Odin - Learning Distributed Computing]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/08/odin-learning-distributed-computing/"/>
    <updated>2014-03-08T00:39:00-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/08/odin-learning-distributed-computing</id>
    <content type="html"><![CDATA[<p>Over the last two years, I&rsquo;ve really become interested in distributed computing and things like big data.  My interest in these topics grew in coincidence with my falling in love with F#.  I do a lot of different projects at work and not all of them involve any of those three topics.  So, to provide a motive for learning more about distributed computing and sharpening my F# skills I have decided to start working on a small side project (currently, by myself but several friends are interested).  This is called Odin, inspired by the Riemann project, it&rsquo;s a distributed monitoring system.  It will consist of lightweight agents and heavyweight monitoring engines.  The agents will run on servers collecting data and sending it to the monitors.  The monitors will read the stream of events coming from all the servers then process, analyze, and act.</p>

<!-- more -->


<p>The goal here is, first and foremost, educational.  To gain experience with F#.  To gain experience with distributed computing.  To play with complex algorithms and designs and new technology.</p>

<h5>Components</h5>

<p>The foundation of Odin is the event stream.  These area  stream of messages.  Each message containing information about an event or state of a server, application, data source, etc.  It&rsquo;s like a Twitter feed.  This feed is currently being built using RabbitMQ.</p>

<p>The next component is the Agent (called Muninn).  The agent is a small service collects data about a server and sends that data to the event stream.  This is the piece which runs on the servers so it needs to be as light and resource spare as possible.  It will just periodically run data collection funcctions and write the results to the event stream.</p>

<p>Finally, the heavy hitter:  Odin.  Odin is the service which receives all the events and analyzes the events to determine if any action should be taken.  For example, if an agent is sending the percent of CPU being used by Server A, then Odin would monitor that stream of events and, if it went above 90% for 5 minutes, send out an email alert.  Odin is meant to be an easily configured platform.  It will handle receiving the event stream, deserializing messages, doing an parsing, and running monitoring scripts.  The monitoring scripts are what will do the actual logic and analysis.  My goal is to make it easy to write these scripts, then publish them to an Odin node which will handle the execution.</p>

<p>Ultimately, I will make Odin be capapble of running in a cluster.  Where the processing load is distributed across nodes and monitor scripts are distributed so as to keep performance even.  For example, a very complex, resource heavy monitor which is flagged as not-critical might get moved to a low performance server where no other monitor is running.</p>

<h5>What I&rsquo;m Exploring</h5>

<p>Right now, Odin has provided me with opportunity to explore many things, including:</p>

<ul>
<li>The Actor model of concurrency and the F# MailBox Processor</li>
<li>RabbitMQ</li>
<li>Reactive Extensions</li>
<li>F# &ndash; this is helping me learn a lot about functional programming</li>
<li>ZeroMQ &ndash; a possible alternative to RabbitMQ</li>
<li>Mono/Crossplatform &ndash; This needs to be capable of handling a heterogenous system (many different OS&rsquo;s), so I&rsquo;ll mess around running F# in Linux/OSX using Mono &amp; Xamarin.</li>
</ul>


<h6>Actors and Mailbox Processors</h6>

<p>Right now, I&rsquo;m using F#&rsquo;s Mailbox processors to handle running concurrent tasks in Odin (e.g. the monitors each run in their own Mailbox Processor).  The Mailbox Processor is an implementation of the Actor Model of concurrency: briefly, each process runs in its own isolated world and if two processes want to communicate they send messages back and forth.  I&rsquo;m using this for a couple reasons.  One it&rsquo;s built into F# so is easy to use and setup.  Two, it provides a very easy way to think about concurrent systems and helps to minimize the early complexity of Odin.  These two things will let me focus on the overall design and the more high level distributed algorithms (e.g. how to split load across a cluster of Odins).</p>

<h6>RabbitMQ</h6>

<p>I chose RabbitMQ to handle communication between services because it has a reputation for being fast, it&rsquo;s simple to use, and it&rsquo;s open source.  The nice administration page which lets me see what&rsquo;s happening in the queues is a nice bonus.  I want to make it easy to switch over to a different communication system (like ZeroMQ) if needed, so the design of Odin should make sure that the actual implementation of the event stream is fairly decoupled from what developers actually code against.</p>

<h6>Reactive Extensions</h6>

<p>The Reactive Extensions will be a big part of Odin.  I chose this because I want to learn the tools, it provides an elegant way for monitors to interact with the event stream, and it provides a simple way to couple the Mailbox processors running the monitors to the queue of messages that contains the events.  Reactive will allow monitors to subscribe to the event stream and then apply queries (LINQ) to the incoming stream of events.  These could be maps, filters, aggregators, you name it, if it can be done on a database table it can be done on an event stream.</p>

<h6>F#</h6>

<p>Simply the most fun language to program I have ever seen.</p>

<h6>ZeroMQ</h6>

<p>A possible alternative to RabbitMQ.  It&rsquo;s written by some of the same people who made the ActiveMQ Protocol.  It differs from RabbitMQ primarily by not having any message brokers.  Its also written in C rather than Erlang.  The goal with ZeroMQ is to make an incredibly simple, incredibly fast messaging system.</p>

<h6>Mono/Xamarin</h6>

<p>In order for this to support Linux and OSX I&rsquo;ll need to be able to build and run this using Mono and Xamarin.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RabbitMQ Library in F#]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/06/building-a-rabbitmq-library-in-f-number/"/>
    <updated>2014-03-06T09:44:30-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/06/building-a-rabbitmq-library-in-f-number</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been doing a lot of experimenting with F# and distributed computing via messaging.  As evidenced by my previous, I&rsquo;m using RabbitMQ as my messaging platform, for a couple of reasons: it&rsquo;s easy to use, it&rsquo;s free and open source, and I might decide to switch to RabbitMQ at work.  I&rsquo;ve been having a lot of fun experimenting with RabbitMQ and F#.  However, I spend a lot of my time just writing and copy/pasting the boilerplate code needed to configure the RabbitMQ client libraries, add the fact that the .Net client library is written for C#, and you get a constant block of boring work.  So, purely for fun and profit, I&rsquo;m going to write a quick F# wrapper.  The purpose of it being to let me very quickly setup RabbitMQ and, just as importantly, work with RabbitMQ in a manner that better fits F#.</p>

<!-- more -->


<h2>Design</h2>

<p>I want to use this as an opportuntity to practice all of my engineering skills.  So, I&rsquo;m going to start by defining the problem I want to solve, the scope of work, and then the design itself.  For the problem: I will try to understand what my needs are, right now, and predict what they will be in the future.  For the scope of work:  RabbitMQ has a lot of stuff, so I will use the definition of the problem to decide how much of the RabbitMQ framework I will expose with my wrapper.  The design:  this is when I will figure out how I want to use this library and how to make it fit the F#/functional paradigm.  I will do all of this, before I start writing any code!</p>

<h4>The Problem(s)</h4>

<p>Right now, I have two problems when I&rsquo;m trying to do a messaging experiment in F#:</p>

<ol>
<li>I have to rewrite the RabbitMQ setup code every time I make a new endpoint.</li>
<li>It&rsquo;s OO/C# focused design doesn&rsquo;t fit very well with F#.  It works, but, I think, it will be better if it&rsquo;s functional.</li>
<li>Long term, I&rsquo;d like to make up a simple RabbitMQ F# Client library which anyone could use.</li>
</ol>


<p>I threw number 3 on there, not because it is a problem I am trying to solve right now, but because this something which could contribute to the F# community.  By keeping this in mind as a long term goal, it will help me write my solution so that it is easy to expand.</p>

<h4>The Scope</h4>

<p>For scope, I&rsquo;ll look at the first two problems and ignore the third.  Problem 2 shouldn&rsquo;t impact the scope very much, as it&rsquo;s really a restriction on my design:  make the design fit the functional paradigm.  Problem 1 definitely can impact the scope of work:  there is a lot to RabbitMQ and doing a full client implementation in F# would be a LOT of work.  To define the scope of work I am going to do, I&rsquo;ll focus on explicitly writing out my needs and then only do the amount of work necessary to meet those needs.</p>

<h5>Problem 1 Needs</h5>

<p>I am doing very little with RabbitMQ in my experiments.  I am not using subjects, or fan-out exchanges, or anything; except making queues, publishing messages to the queue, and reading from the queue.  The messages, for this post, will also just be simple text messages, so no serialization/deserialization.  So this is all I need (in version 1 :) ):</p>

<ol>
<li>Create a queue on a RabbitMQ server</li>
<li>Publish a message to a specific queue</li>
<li>Read messages from a specific queue</li>
<li>Messages are just text messages</li>
</ol>


<p>Easy Enough!  My first version of the RabbitMQ F# client will only do those 3 things.</p>

<h5>Problem 2 Needs</h5>

<p>This is purely aesthetic.  The more I worke in F#, the more I find writing up classes and implementing interfaces to feel a bit &ldquo;ehhh&rdquo;.  So I want to make the way a developer uses and interacts with RabbitMQ to be more functional.  This is a bit more vague than I&rsquo;d like, because this will require a bit more learning on my part; which is why I put it here!</p>

<h5>Scope</h5>

<p>At the end of all of this, my library will do just provide these three features:</p>

<ol>
<li>Connect to or create a specified queue on a RabbitMQ server</li>
<li>Provide a way to publish messages to the queue</li>
<li>Provide a way to read messages from the queue</li>
</ol>


<p>Behind the scenes it will do whatever setup/teardown is needed to get those 3 features to work.</p>

<h4>The Design</h4>

<p>The design needs to be more functional than OO, so that it fits better with the general aesthetic flow of writing F#.  Being new to functional design, I&rsquo;ll start with the <a href="http://simontcousins.azurewebsites.net/manifesto/">NOOO Manifesto</a> as my guide:</p>

<ul>
<li>Functions and Types over classes</li>
<li>Purity over mutability</li>
<li>Composition over inheritance</li>
<li>Higher-order functions over method dispatch</li>
<li>Options over nulls</li>
</ul>


<p>In my next post, I&rsquo;ll start the actual implementation of my library.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RabbitMQ With F#]]></title>
    <link href="http://erichgess.github.io/blog/2014/03/04/using-rabbitmq-with-f-number/"/>
    <updated>2014-03-04T21:56:20-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/03/04/using-rabbitmq-with-f-number</id>
    <content type="html"><![CDATA[<p>Over the last few years, one of the topics on which I have done much of my work has been distributed computing using message queues.  Recently, I&rsquo;ve been playing around with RabbitMQ, not for any reason other than that I wanted a simple, easy to setup, and easy to use messaging framework, which I could use for little experiments at home.</p>

<p>I&rsquo;m not going to talk much about using RabbitMQ.  What I am going to talk about is one of the many ways in which F# makes programming just an absolute blast.</p>

<!-- more -->


<p>Outside of work, most of my programming has been with F# (with a tiny bit of Clojure).  Naturally, I&rsquo;ve done some experiments with using F# and RabbitMQ.  I&rsquo;ll cover that, but that&rsquo;s not really what this post is about.</p>

<p>My first attempt at this was to just follow the basic C# tutorial from www.rabbitmq.com, twisting it here and there for F#.  The tutorial you build a simple sender/receiver system:  one app sends messages to another app, which prints them to the console.  Which got me with some good workable boring code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">use</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'><span class="k">use</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="s2">&quot;hello&quot;</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="s2">&quot;hello&quot;</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">BasicDeliverEventArgs</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>    <span class="n">printfn</span> <span class="s2">&quot;%s&quot;</span> <span class="n">message</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will do its job.  Listening on the queue and writing the messages as they come in.  It&rsquo;s not spectaculor and it doesn&rsquo;t use any of the Consumer class framework which comes with RabbitMQ.  But again, this post isn&rsquo;t about using RabbitMQ, it&rsquo;s about using <em>sequence expressions</em>.</p>

<p>The Sequence Expression is a fun little construct in F# that lets you write programmatic enumerables.  For example, I want an enumerable with the numbers from 1 to 100, I would just write</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">example</span> <span class="o">=</span> <span class="n">seq</span><span class="o">{</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">100</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, what if I want a sequence of data, where everytime I ask for an element it gives me the current time:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">example2</span> <span class="o">=</span> <span class="n">seq</span> <span class="o">{</span>
</span><span class='line'>                      <span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>                          <span class="k">yield</span> <span class="nn">DateTime</span><span class="p">.</span><span class="nc">Now</span>
</span><span class='line'>                 <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The sequence expression got me to thinking about trying that out with the message queues.  So, I changed my receiver code to look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConnectionFactory</span><span class="o">(</span><span class="nc">HostName</span> <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">use</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="nc">CreateConnection</span><span class="bp">()</span>
</span><span class='line'><span class="k">use</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="nc">CreateModel</span><span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="nc">QueueDeclare</span><span class="o">(</span> <span class="s2">&quot;hello&quot;</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="bp">false</span><span class="o">,</span> <span class="k">null</span> <span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QueueingBasicConsumer</span><span class="o">(</span><span class="n">channel</span><span class="o">)</span>
</span><span class='line'><span class="n">channel</span><span class="o">.</span><span class="nc">BasicConsume</span><span class="o">(</span><span class="s2">&quot;hello&quot;</span><span class="o">,</span> <span class="bp">true</span><span class="o">,</span> <span class="n">consumer</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// I wrap the queue in a sequence expression</span>
</span><span class='line'><span class="k">let</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">seq</span><span class="o">{</span>
</span><span class='line'>                <span class="k">while</span> <span class="bp">true</span> <span class="k">do</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">ea</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="nn">Queue</span><span class="p">.</span><span class="nc">Dequeue</span><span class="bp">()</span> <span class="o">:&gt;</span> <span class="nc">BasicDeliverEventArgs</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">ea</span><span class="o">.</span><span class="nc">Body</span>
</span><span class='line'>                    <span class="k">let</span> <span class="n">message</span> <span class="o">=</span> <span class="nn">Encoding</span><span class="p">.</span><span class="nn">UTF8</span><span class="p">.</span><span class="nc">GetString</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">yield</span> <span class="n">message</span>
</span><span class='line'>            <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates an enumerable data structure called <code>queue</code>.  And this is where things get awesome, because I can now write <em>queries</em> to my queue of messages, exactly as I would to a database or list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">qQuery</span> <span class="o">=</span> <span class="n">query</span><span class="o">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">message</span> <span class="k">in</span> <span class="n">queue</span> <span class="k">do</span>
</span><span class='line'>                <span class="n">select</span> <span class="n">i</span><span class="o">.</span><span class="nc">ToUpper</span><span class="bp">()</span>
</span><span class='line'>             <span class="o">}</span>
</span><span class='line'><span class="n">qQuery</span> <span class="o">|&gt;</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="n">printfn</span> <span class="s2">&quot;%d&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This query will select each message from the queue and convert it to all capital letters.  The Seq.iter will then pull each message from the query result and print it to the screen.  Do note that the <code>seq{...}</code> I bound to <code>queue</code> is an infinite loop, so <code>qQuery |&gt; Seq.iter (printfn "%d")</code> will run forever, printing out each message as it arrives in the queue.</p>

<p>If you take a look at the <a href="http://msdn.microsoft.com/en-us/library/hh225374.aspx">MSDN</a> article on F#&rsquo;s Query Expressions, you&rsquo;ll see that there is a lot that can be done.  For example, if we had two different queues:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">doubleQuery</span> <span class="o">=</span> <span class="n">query</span><span class="o">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="n">m1</span> <span class="k">in</span> <span class="n">queue</span> <span class="k">do</span>
</span><span class='line'>                    <span class="n">join</span> <span class="n">m2</span> <span class="k">in</span> <span class="n">queue2</span> <span class="n">on</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">m1</span> <span class="o">=</span> <span class="n">m2</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">select</span> <span class="o">(</span><span class="n">m1</span><span class="o">,</span> <span class="n">m2</span><span class="o">)</span>
</span><span class='line'>                  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or maybe even a join between the message queue and a database query.</p>

<p>The long and short of all this is that I keep falling more in love with F#.  I get to spend so much time not writing boilerplate code and squiggly braces and so much time just doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experimenting With Quotations]]></title>
    <link href="http://erichgess.github.io/blog/2014/02/16/my-first-post/"/>
    <updated>2014-02-16T22:37:19-06:00</updated>
    <id>http://erichgess.github.io/blog/2014/02/16/my-first-post</id>
    <content type="html"><![CDATA[<p>One of the more interesting featuers of F# is the Code Quotation.  Though I do find this interesting now, it has taken over a year before I saw any reason I might have even slight interest.  Even now, as I have taken a much greater interest in the topic, it&rsquo;s been difficult finding anything detailed on the topic.</p>

<!-- more -->


<p>Anyone familiar with Lisp or one of its dialects, such as Clojure, will find Quotations familiar.  To put it simply, Quotations allow you to represent F# code as data.  Take the following example, where I bind a Quotation to <code>q</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">q</span> <span class="o">=</span> <span class="o">&lt;@</span> <span class="mi">2</span> <span class="o">@&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this in the FSI gives the following output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="o">:</span> <span class="nn">Quotations</span><span class="p">.</span><span class="nc">Expr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nc">Value</span> <span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The operator <code>&lt;@ @&gt;</code> takes the F# code which it wraps and converts it into a Quotation data structure.  In this case, it takes the value 2 and creates a Value type, which is part of the <code>Quotations.Expr</code> discriminated union.</p>

<p>I&rsquo;ll do a more interesting example, which will better show what a Quotation actually gives you, using the FSI:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">&gt;</span> <span class="k">let</span> <span class="n">q</span> <span class="o">=</span> <span class="o">&lt;@</span> <span class="o">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">)</span> <span class="o">@&gt;;;</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">q</span> <span class="o">:</span> <span class="nn">Quotations</span><span class="p">.</span><span class="nc">Expr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>  <span class="nc">Call</span> <span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="n">op_Multiply</span><span class="o">,</span>
</span><span class='line'>      <span class="o">[</span><span class="nc">Call</span> <span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="n">op_Addition</span><span class="o">,</span> <span class="o">[</span><span class="nc">Value</span> <span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Value</span> <span class="o">(</span><span class="mi">3</span><span class="o">)]),</span>
</span><span class='line'>       <span class="nc">Call</span> <span class="o">(</span><span class="nc">None</span><span class="o">,</span> <span class="n">op_Subtraction</span><span class="o">,</span> <span class="o">[</span><span class="nc">Value</span> <span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="nc">Value</span> <span class="o">(</span><span class="mi">1</span><span class="o">)])])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Quotation gives you the Abstract Syntax Tree (AST) for a given F# expression.  Which, when I first started learning F# a year ago, was nothing but a curiousity.  In fact, it wasn&rsquo;t until just the other day that I actually started to get excited about Quotations.</p>

<p>Whenever I read about Code Quotations, it seems it&rsquo;s always about using Quotations to handle translating F# code into another language.  The best example of this use case, in my opinion, is WebSharper; which takes F# code and translates it into JavaScript.</p>

<p>However, it&rsquo;s the possibilities of using Quotations with distributed computing which caused my sudden spike in interest.  What&rsquo;s been bouncing around in my brain is:  can I write code in F#, break it apart into discrete chunks, send those chunks to be executing on different servers and then collect the results (MapReduce for sure).</p>
]]></content>
  </entry>
  
</feed>
